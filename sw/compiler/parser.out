Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    TYPEDEF

Grammar

Rule 0     S' -> strt
Rule 1     new_scope -> <empty>
Rule 2     finish_scope -> <empty>
Rule 3     identifier -> IDENTIFIER
Rule 4     constant -> INTEGER
Rule 5     constant -> DECIMALFLOAT
Rule 6     constant -> FLOATVAL
Rule 7     constant -> CHARACTER
Rule 8     constant -> ESCAPECHAR
Rule 9     constant -> STRING
Rule 10    primary_expression -> identifier
Rule 11    primary_expression -> constant
Rule 12    primary_expression -> ( expression )
Rule 13    postfix_expression -> primary_expression
Rule 14    postfix_expression -> postfix_expression [ expression ]
Rule 15    postfix_expression -> postfix_expression ( )
Rule 16    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 17    postfix_expression -> postfix_expression . identifier
Rule 18    postfix_expression -> postfix_expression PTR_OP identifier
Rule 19    postfix_expression -> postfix_expression INC_OP
Rule 20    postfix_expression -> postfix_expression DEC_OP
Rule 21    argument_expression_list -> assignment_expression
Rule 22    argument_expression_list -> argument_expression_list , assignment_expression
Rule 23    unary_expression -> postfix_expression
Rule 24    unary_expression -> INC_OP unary_expression
Rule 25    unary_expression -> DEC_OP unary_expression
Rule 26    unary_expression -> unary_operator cast_expression
Rule 27    unary_expression -> SIZEOF unary_expression
Rule 28    unary_expression -> SIZEOF ( type_name )
Rule 29    unary_operator -> &
Rule 30    unary_operator -> *
Rule 31    unary_operator -> +
Rule 32    unary_operator -> -
Rule 33    unary_operator -> !
Rule 34    cast_expression -> unary_expression
Rule 35    cast_expression -> ( type_name ) cast_expression
Rule 36    multiplicative_expression -> cast_expression
Rule 37    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 38    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 39    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 40    additive_expression -> multiplicative_expression
Rule 41    additive_expression -> additive_expression + multiplicative_expression
Rule 42    additive_expression -> additive_expression - multiplicative_expression
Rule 43    shift_expression -> additive_expression
Rule 44    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 45    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 46    relational_expression -> shift_expression
Rule 47    relational_expression -> relational_expression < shift_expression
Rule 48    relational_expression -> relational_expression > shift_expression
Rule 49    relational_expression -> relational_expression LE_OP shift_expression
Rule 50    relational_expression -> relational_expression GE_OP shift_expression
Rule 51    equality_expression -> relational_expression
Rule 52    equality_expression -> equality_expression EQ_OP relational_expression
Rule 53    equality_expression -> equality_expression NE_OP relational_expression
Rule 54    and_expression -> equality_expression
Rule 55    and_expression -> and_expression & equality_expression
Rule 56    exclusive_or_expression -> and_expression
Rule 57    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 58    inclusive_or_expression -> exclusive_or_expression
Rule 59    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 60    logical_and_expression -> inclusive_or_expression
Rule 61    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 62    logical_or_expression -> logical_and_expression
Rule 63    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 64    conditional_expression -> logical_or_expression
Rule 65    assignment_expression -> conditional_expression
Rule 66    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 67    equal_to -> =
Rule 68    assignment_operator -> equal_to
Rule 69    assignment_operator -> MUL_ASSIGN
Rule 70    assignment_operator -> DIV_ASSIGN
Rule 71    assignment_operator -> MOD_ASSIGN
Rule 72    assignment_operator -> ADD_ASSIGN
Rule 73    assignment_operator -> SUB_ASSIGN
Rule 74    assignment_operator -> LEFT_ASSIGN
Rule 75    assignment_operator -> RIGHT_ASSIGN
Rule 76    expression -> assignment_expression
Rule 77    expression -> expression , assignment_expression
Rule 78    constant_expression -> conditional_expression
Rule 79    declaration -> declaration_specifiers ;
Rule 80    declaration -> declaration_specifiers error
Rule 81    declaration -> declaration_specifiers init_declarator_list ;
Rule 82    declaration -> declaration_specifiers init_declarator_list error
Rule 83    declaration_specifiers -> type_specifier
Rule 84    init_declarator_list -> init_declarator
Rule 85    init_declarator_list -> init_declarator_list , init_declarator
Rule 86    init_declarator -> declarator equal_to initializer
Rule 87    init_declarator -> declarator
Rule 88    type_specifier -> VOID
Rule 89    type_specifier -> CHAR
Rule 90    type_specifier -> INT
Rule 91    type_specifier -> FLOAT
Rule 92    type_specifier -> TYPE_NAME
Rule 93    specifier_qualifier_list -> type_specifier
Rule 94    declarator -> pointer declarator
Rule 95    declarator -> direct_declarator
Rule 96    set_parameter_flag -> <empty>
Rule 97    unset_parameter_flag -> <empty>
Rule 98    direct_declarator -> identifier
Rule 99    direct_declarator -> direct_declarator [ constant_expression ]
Rule 100   direct_declarator -> direct_declarator [ ]
Rule 101   direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
Rule 102   direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
Rule 103   direct_declarator -> direct_declarator ( )
Rule 104   pointer -> *
Rule 105   parameter_type_list -> parameter_list
Rule 106   parameter_list -> parameter_declaration
Rule 107   parameter_list -> parameter_list , parameter_declaration
Rule 108   parameter_declaration -> declaration_specifiers declarator
Rule 109   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 110   parameter_declaration -> declaration_specifiers
Rule 111   identifier_list -> identifier
Rule 112   identifier_list -> identifier_list , identifier
Rule 113   type_name -> specifier_qualifier_list
Rule 114   type_name -> specifier_qualifier_list abstract_declarator
Rule 115   abstract_declarator -> pointer
Rule 116   abstract_declarator -> direct_abstract_declarator
Rule 117   abstract_declarator -> pointer direct_abstract_declarator
Rule 118   direct_abstract_declarator -> [ ]
Rule 119   direct_abstract_declarator -> [ constant_expression ]
Rule 120   initializer -> assignment_expression
Rule 121   initializer -> { initializer_list }
Rule 122   initializer -> { initializer_list , }
Rule 123   initializer_list -> initializer
Rule 124   initializer_list -> initializer_list , initializer
Rule 125   statement -> labeled_statement
Rule 126   statement -> compound_statement
Rule 127   statement -> expression_statement
Rule 128   statement -> selection_statement
Rule 129   statement -> iteration_statement
Rule 130   statement -> jump_statement
Rule 131   labeled_statement -> CASE constant_expression : statement
Rule 132   labeled_statement -> DEFAULT : statement
Rule 133   compound_statement -> { }
Rule 134   compound_statement -> { new_scope compound_statement_list finish_scope }
Rule 135   compound_statement -> { new_scope compound_declaration_list finish_scope }
Rule 136   compound_statement_list -> declaration_list
Rule 137   compound_statement_list -> declaration_list compound_declaration_list
Rule 138   compound_declaration_list -> statement_list
Rule 139   compound_declaration_list -> statement_list compound_statement_list
Rule 140   declaration_list -> declaration
Rule 141   declaration_list -> declaration_list declaration
Rule 142   statement_list -> statement
Rule 143   statement_list -> statement_list statement
Rule 144   expression_statement -> ;
Rule 145   expression_statement -> expression ;
Rule 146   expression_statement -> expression error
Rule 147   get_labels -> <empty>
Rule 148   release_labels -> <empty>
Rule 149   switch_label -> <empty>
Rule 150   release_switch_label -> <empty>
Rule 151   selection_statement -> IF ( expression ) statement
Rule 152   selection_statement -> IF ( expression ) statement ELSE statement
Rule 153   selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
Rule 154   iteration_statement -> WHILE get_labels ( expression ) statement release_labels
Rule 155   iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels
Rule 156   iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
Rule 157   iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
Rule 158   _embed0_iteration_statement -> <empty>
Rule 159   _embed1_iteration_statement -> <empty>
Rule 160   jump_statement -> CONTINUE ;
Rule 161   jump_statement -> BREAK ;
Rule 162   jump_statement -> RETURN ;
Rule 163   jump_statement -> RETURN expression ;
Rule 164   strt -> strt1
Rule 165   strt -> strt strt1
Rule 166   strt1 -> external_declaration
Rule 167   strt1 -> strt1 external_declaration
Rule 168   external_declaration -> function_definition
Rule 169   external_declaration -> declaration
Rule 170   function_scope -> <empty>
Rule 171   unset_function_scope -> <empty>
Rule 172   function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
Rule 173   function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope
Rule 174   function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
Rule 175   function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope

Terminals, with rules where they appear

!                    : 33
%                    : 39
&                    : 29 55
(                    : 12 15 16 28 35 101 102 103 151 152 153 154 155 156 157
)                    : 12 15 16 28 35 101 102 103 151 152 153 154 155 156 157
*                    : 30 37 104
+                    : 31 41
,                    : 22 77 85 107 112 122 124
-                    : 32 42
.                    : 17
/                    : 38
:                    : 131 132
;                    : 79 81 144 145 155 160 161 162 163
<                    : 47
=                    : 67
>                    : 48
ADD_ASSIGN           : 72
AND_OP               : 61
BREAK                : 161
CASE                 : 131
CHAR                 : 89
CHARACTER            : 7
CONTINUE             : 160
DECIMALFLOAT         : 5
DEC_OP               : 20 25
DEFAULT              : 132
DIV_ASSIGN           : 70
DO                   : 155
ELSE                 : 152
EQ_OP                : 52
ESCAPECHAR           : 8
FLOAT                : 91
FLOATVAL             : 6
FOR                  : 156 157
GE_OP                : 50
IDENTIFIER           : 3
IF                   : 151 152
INC_OP               : 19 24
INT                  : 90
INTEGER              : 4
LEFT_ASSIGN          : 74
LEFT_OP              : 44
LE_OP                : 49
MOD_ASSIGN           : 71
MUL_ASSIGN           : 69
NE_OP                : 53
OR_OP                : 63
PTR_OP               : 18
RETURN               : 162 163
RIGHT_ASSIGN         : 75
RIGHT_OP             : 45
SIZEOF               : 27 28
STRING               : 9
SUB_ASSIGN           : 73
SWITCH               : 153
TYPEDEF              : 
TYPE_NAME            : 92
VOID                 : 88
WHILE                : 154 155
[                    : 14 99 100 118 119
]                    : 14 99 100 118 119
^                    : 57
error                : 80 82 146
{                    : 121 122 133 134 135
|                    : 59
}                    : 121 122 133 134 135

Nonterminals, with rules where they appear

_embed0_iteration_statement : 156
_embed1_iteration_statement : 157
abstract_declarator  : 109 114
additive_expression  : 41 42 43 44 45
and_expression       : 55 56 57
argument_expression_list : 16 22
assignment_expression : 21 22 66 76 77 120
assignment_operator  : 66
cast_expression      : 26 35 36 37 38 39
compound_declaration_list : 135 137
compound_statement   : 126 172 173 174 175
compound_statement_list : 134 139
conditional_expression : 65 78
constant             : 11
constant_expression  : 99 119 131
declaration          : 140 141 169
declaration_list     : 136 137 141 172 174
declaration_specifiers : 79 80 81 82 108 109 110 172 173
declarator           : 86 87 94 108 172 173 174 175
direct_abstract_declarator : 116 117
direct_declarator    : 95 99 100 101 102 103
equal_to             : 68 86
equality_expression  : 52 53 54 55
exclusive_or_expression : 57 58 59
expression           : 12 14 77 145 146 151 152 153 154 155 157 163
expression_statement : 127 156 156 157 157
external_declaration : 166 167
finish_scope         : 134 135
function_definition  : 168
function_scope       : 172 173 174 175
get_labels           : 153 154 155 156 157 172 173 174 175
identifier           : 10 17 18 98 111 112
identifier_list      : 102 112
inclusive_or_expression : 59 60 61
init_declarator      : 84 85
init_declarator_list : 81 82 85
initializer          : 86 123 124
initializer_list     : 121 122 124
iteration_statement  : 129
jump_statement       : 130
labeled_statement    : 125
logical_and_expression : 61 62 63
logical_or_expression : 63 64
multiplicative_expression : 37 38 39 40 41 42
new_scope            : 134 135
parameter_declaration : 106 107
parameter_list       : 105 107
parameter_type_list  : 101
pointer              : 94 115 117
postfix_expression   : 14 15 16 17 18 19 20 23
primary_expression   : 13
relational_expression : 47 48 49 50 51 52 53
release_labels       : 153 154 155 156 157 172 173 174 175
release_switch_label : 153
selection_statement  : 128
set_parameter_flag   : 101 102
shift_expression     : 44 45 46 47 48 49 50
specifier_qualifier_list : 113 114
statement            : 131 132 142 143 151 152 152 153 154 155 156 157
statement_list       : 138 139 143
strt                 : 165 0
strt1                : 164 165 167
switch_label         : 153
type_name            : 28 35
type_specifier       : 83 93
unary_expression     : 24 25 27 34 66
unary_operator       : 26
unset_function_scope : 172 173 174 175
unset_parameter_flag : 101 102

Parsing method: LALR

state 0

    (0) S' -> . strt
    (164) strt -> . strt1
    (165) strt -> . strt strt1
    (166) strt1 -> . external_declaration
    (167) strt1 -> . strt1 external_declaration
    (168) external_declaration -> . function_definition
    (169) external_declaration -> . declaration
    (172) function_definition -> . declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (173) function_definition -> . declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (174) function_definition -> . declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (175) function_definition -> . declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    declaration                    shift and go to state 3
    pointer                        shift and go to state 5
    external_declaration           shift and go to state 6
    type_specifier                 shift and go to state 7
    strt1                          shift and go to state 9
    direct_declarator              shift and go to state 11
    declaration_specifiers         shift and go to state 12
    function_definition            shift and go to state 13
    strt                           shift and go to state 16
    declarator                     shift and go to state 17
    identifier                     shift and go to state 18

state 1

    (92) type_specifier -> TYPE_NAME .

    ;               reduce using rule 92 (type_specifier -> TYPE_NAME .)
    error           reduce using rule 92 (type_specifier -> TYPE_NAME .)
    *               reduce using rule 92 (type_specifier -> TYPE_NAME .)
    IDENTIFIER      reduce using rule 92 (type_specifier -> TYPE_NAME .)
    [               reduce using rule 92 (type_specifier -> TYPE_NAME .)
    ,               reduce using rule 92 (type_specifier -> TYPE_NAME .)
    )               reduce using rule 92 (type_specifier -> TYPE_NAME .)


state 2

    (88) type_specifier -> VOID .

    ;               reduce using rule 88 (type_specifier -> VOID .)
    error           reduce using rule 88 (type_specifier -> VOID .)
    *               reduce using rule 88 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 88 (type_specifier -> VOID .)
    [               reduce using rule 88 (type_specifier -> VOID .)
    ,               reduce using rule 88 (type_specifier -> VOID .)
    )               reduce using rule 88 (type_specifier -> VOID .)


state 3

    (169) external_declaration -> declaration .

    VOID            reduce using rule 169 (external_declaration -> declaration .)
    CHAR            reduce using rule 169 (external_declaration -> declaration .)
    INT             reduce using rule 169 (external_declaration -> declaration .)
    FLOAT           reduce using rule 169 (external_declaration -> declaration .)
    TYPE_NAME       reduce using rule 169 (external_declaration -> declaration .)
    *               reduce using rule 169 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 169 (external_declaration -> declaration .)
    $end            reduce using rule 169 (external_declaration -> declaration .)


state 4

    (89) type_specifier -> CHAR .

    ;               reduce using rule 89 (type_specifier -> CHAR .)
    error           reduce using rule 89 (type_specifier -> CHAR .)
    *               reduce using rule 89 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 89 (type_specifier -> CHAR .)
    [               reduce using rule 89 (type_specifier -> CHAR .)
    ,               reduce using rule 89 (type_specifier -> CHAR .)
    )               reduce using rule 89 (type_specifier -> CHAR .)


state 5

    (94) declarator -> pointer . declarator
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    direct_declarator              shift and go to state 11
    declarator                     shift and go to state 19
    identifier                     shift and go to state 18
    pointer                        shift and go to state 5

state 6

    (166) strt1 -> external_declaration .

    VOID            reduce using rule 166 (strt1 -> external_declaration .)
    CHAR            reduce using rule 166 (strt1 -> external_declaration .)
    INT             reduce using rule 166 (strt1 -> external_declaration .)
    FLOAT           reduce using rule 166 (strt1 -> external_declaration .)
    TYPE_NAME       reduce using rule 166 (strt1 -> external_declaration .)
    *               reduce using rule 166 (strt1 -> external_declaration .)
    IDENTIFIER      reduce using rule 166 (strt1 -> external_declaration .)
    $end            reduce using rule 166 (strt1 -> external_declaration .)


state 7

    (83) declaration_specifiers -> type_specifier .

    ;               reduce using rule 83 (declaration_specifiers -> type_specifier .)
    error           reduce using rule 83 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 83 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 83 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 83 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 83 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 83 (declaration_specifiers -> type_specifier .)


state 8

    (104) pointer -> * .

    *               reduce using rule 104 (pointer -> * .)
    IDENTIFIER      reduce using rule 104 (pointer -> * .)
    [               reduce using rule 104 (pointer -> * .)
    )               reduce using rule 104 (pointer -> * .)
    ,               reduce using rule 104 (pointer -> * .)


state 9

    (164) strt -> strt1 .
    (167) strt1 -> strt1 . external_declaration
    (168) external_declaration -> . function_definition
    (169) external_declaration -> . declaration
    (172) function_definition -> . declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (173) function_definition -> . declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (174) function_definition -> . declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (175) function_definition -> . declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TYPE_NAME resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    $end            reduce using rule 164 (strt -> strt1 .)
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

  ! VOID            [ reduce using rule 164 (strt -> strt1 .) ]
  ! CHAR            [ reduce using rule 164 (strt -> strt1 .) ]
  ! INT             [ reduce using rule 164 (strt -> strt1 .) ]
  ! FLOAT           [ reduce using rule 164 (strt -> strt1 .) ]
  ! TYPE_NAME       [ reduce using rule 164 (strt -> strt1 .) ]
  ! *               [ reduce using rule 164 (strt -> strt1 .) ]
  ! IDENTIFIER      [ reduce using rule 164 (strt -> strt1 .) ]

    pointer                        shift and go to state 5
    external_declaration           shift and go to state 20
    type_specifier                 shift and go to state 7
    direct_declarator              shift and go to state 11
    declaration_specifiers         shift and go to state 12
    declaration                    shift and go to state 3
    function_definition            shift and go to state 13
    declarator                     shift and go to state 17
    identifier                     shift and go to state 18

state 10

    (3) identifier -> IDENTIFIER .

    [               reduce using rule 3 (identifier -> IDENTIFIER .)
    (               reduce using rule 3 (identifier -> IDENTIFIER .)
    VOID            reduce using rule 3 (identifier -> IDENTIFIER .)
    CHAR            reduce using rule 3 (identifier -> IDENTIFIER .)
    INT             reduce using rule 3 (identifier -> IDENTIFIER .)
    FLOAT           reduce using rule 3 (identifier -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 3 (identifier -> IDENTIFIER .)
    {               reduce using rule 3 (identifier -> IDENTIFIER .)
    =               reduce using rule 3 (identifier -> IDENTIFIER .)
    ;               reduce using rule 3 (identifier -> IDENTIFIER .)
    error           reduce using rule 3 (identifier -> IDENTIFIER .)
    ,               reduce using rule 3 (identifier -> IDENTIFIER .)
    )               reduce using rule 3 (identifier -> IDENTIFIER .)
    .               reduce using rule 3 (identifier -> IDENTIFIER .)
    PTR_OP          reduce using rule 3 (identifier -> IDENTIFIER .)
    INC_OP          reduce using rule 3 (identifier -> IDENTIFIER .)
    DEC_OP          reduce using rule 3 (identifier -> IDENTIFIER .)
    *               reduce using rule 3 (identifier -> IDENTIFIER .)
    /               reduce using rule 3 (identifier -> IDENTIFIER .)
    %               reduce using rule 3 (identifier -> IDENTIFIER .)
    +               reduce using rule 3 (identifier -> IDENTIFIER .)
    -               reduce using rule 3 (identifier -> IDENTIFIER .)
    LEFT_OP         reduce using rule 3 (identifier -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 3 (identifier -> IDENTIFIER .)
    <               reduce using rule 3 (identifier -> IDENTIFIER .)
    >               reduce using rule 3 (identifier -> IDENTIFIER .)
    LE_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    GE_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    EQ_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    NE_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    &               reduce using rule 3 (identifier -> IDENTIFIER .)
    ^               reduce using rule 3 (identifier -> IDENTIFIER .)
    |               reduce using rule 3 (identifier -> IDENTIFIER .)
    AND_OP          reduce using rule 3 (identifier -> IDENTIFIER .)
    OR_OP           reduce using rule 3 (identifier -> IDENTIFIER .)
    ]               reduce using rule 3 (identifier -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 3 (identifier -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 3 (identifier -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 3 (identifier -> IDENTIFIER .)
    }               reduce using rule 3 (identifier -> IDENTIFIER .)
    :               reduce using rule 3 (identifier -> IDENTIFIER .)


state 11

    (95) declarator -> direct_declarator .
    (99) direct_declarator -> direct_declarator . [ constant_expression ]
    (100) direct_declarator -> direct_declarator . [ ]
    (101) direct_declarator -> direct_declarator . ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> direct_declarator . ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> direct_declarator . ( )

    VOID            reduce using rule 95 (declarator -> direct_declarator .)
    CHAR            reduce using rule 95 (declarator -> direct_declarator .)
    INT             reduce using rule 95 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 95 (declarator -> direct_declarator .)
    TYPE_NAME       reduce using rule 95 (declarator -> direct_declarator .)
    {               reduce using rule 95 (declarator -> direct_declarator .)
    =               reduce using rule 95 (declarator -> direct_declarator .)
    ;               reduce using rule 95 (declarator -> direct_declarator .)
    error           reduce using rule 95 (declarator -> direct_declarator .)
    ,               reduce using rule 95 (declarator -> direct_declarator .)
    )               reduce using rule 95 (declarator -> direct_declarator .)
    [               shift and go to state 22
    (               shift and go to state 21


state 12

    (172) function_definition -> declaration_specifiers . declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (173) function_definition -> declaration_specifiers . declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (79) declaration -> declaration_specifiers . ;
    (80) declaration -> declaration_specifiers . error
    (81) declaration -> declaration_specifiers . init_declarator_list ;
    (82) declaration -> declaration_specifiers . init_declarator_list error
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (84) init_declarator_list -> . init_declarator
    (85) init_declarator_list -> . init_declarator_list , init_declarator
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (86) init_declarator -> . declarator equal_to initializer
    (87) init_declarator -> . declarator
    (3) identifier -> . IDENTIFIER

    ;               shift and go to state 24
    error           shift and go to state 27
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    identifier                     shift and go to state 18
    direct_declarator              shift and go to state 11
    init_declarator                shift and go to state 25
    declarator                     shift and go to state 26
    init_declarator_list           shift and go to state 23
    pointer                        shift and go to state 5

state 13

    (168) external_declaration -> function_definition .

    VOID            reduce using rule 168 (external_declaration -> function_definition .)
    CHAR            reduce using rule 168 (external_declaration -> function_definition .)
    INT             reduce using rule 168 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 168 (external_declaration -> function_definition .)
    TYPE_NAME       reduce using rule 168 (external_declaration -> function_definition .)
    *               reduce using rule 168 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 168 (external_declaration -> function_definition .)
    $end            reduce using rule 168 (external_declaration -> function_definition .)


state 14

    (90) type_specifier -> INT .

    ;               reduce using rule 90 (type_specifier -> INT .)
    error           reduce using rule 90 (type_specifier -> INT .)
    *               reduce using rule 90 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 90 (type_specifier -> INT .)
    [               reduce using rule 90 (type_specifier -> INT .)
    ,               reduce using rule 90 (type_specifier -> INT .)
    )               reduce using rule 90 (type_specifier -> INT .)


state 15

    (91) type_specifier -> FLOAT .

    ;               reduce using rule 91 (type_specifier -> FLOAT .)
    error           reduce using rule 91 (type_specifier -> FLOAT .)
    *               reduce using rule 91 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 91 (type_specifier -> FLOAT .)
    [               reduce using rule 91 (type_specifier -> FLOAT .)
    ,               reduce using rule 91 (type_specifier -> FLOAT .)
    )               reduce using rule 91 (type_specifier -> FLOAT .)


state 16

    (0) S' -> strt .
    (165) strt -> strt . strt1
    (166) strt1 -> . external_declaration
    (167) strt1 -> . strt1 external_declaration
    (168) external_declaration -> . function_definition
    (169) external_declaration -> . declaration
    (172) function_definition -> . declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (173) function_definition -> . declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (174) function_definition -> . declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (175) function_definition -> . declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    declaration                    shift and go to state 3
    pointer                        shift and go to state 5
    external_declaration           shift and go to state 6
    type_specifier                 shift and go to state 7
    strt1                          shift and go to state 28
    direct_declarator              shift and go to state 11
    declaration_specifiers         shift and go to state 12
    function_definition            shift and go to state 13
    declarator                     shift and go to state 17
    identifier                     shift and go to state 18

state 17

    (174) function_definition -> declarator . declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (175) function_definition -> declarator . function_scope get_labels compound_statement release_labels unset_function_scope
    (140) declaration_list -> . declaration
    (141) declaration_list -> . declaration_list declaration
    (170) function_scope -> .
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME

    {               reduce using rule 170 (function_scope -> .)
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1

    declaration                    shift and go to state 29
    type_specifier                 shift and go to state 7
    function_scope                 shift and go to state 30
    declaration_list               shift and go to state 31
    declaration_specifiers         shift and go to state 32

state 18

    (98) direct_declarator -> identifier .

    [               reduce using rule 98 (direct_declarator -> identifier .)
    (               reduce using rule 98 (direct_declarator -> identifier .)
    VOID            reduce using rule 98 (direct_declarator -> identifier .)
    CHAR            reduce using rule 98 (direct_declarator -> identifier .)
    INT             reduce using rule 98 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 98 (direct_declarator -> identifier .)
    TYPE_NAME       reduce using rule 98 (direct_declarator -> identifier .)
    {               reduce using rule 98 (direct_declarator -> identifier .)
    ,               reduce using rule 98 (direct_declarator -> identifier .)
    )               reduce using rule 98 (direct_declarator -> identifier .)
    =               reduce using rule 98 (direct_declarator -> identifier .)
    ;               reduce using rule 98 (direct_declarator -> identifier .)
    error           reduce using rule 98 (direct_declarator -> identifier .)


state 19

    (94) declarator -> pointer declarator .

    VOID            reduce using rule 94 (declarator -> pointer declarator .)
    CHAR            reduce using rule 94 (declarator -> pointer declarator .)
    INT             reduce using rule 94 (declarator -> pointer declarator .)
    FLOAT           reduce using rule 94 (declarator -> pointer declarator .)
    TYPE_NAME       reduce using rule 94 (declarator -> pointer declarator .)
    {               reduce using rule 94 (declarator -> pointer declarator .)
    =               reduce using rule 94 (declarator -> pointer declarator .)
    ;               reduce using rule 94 (declarator -> pointer declarator .)
    error           reduce using rule 94 (declarator -> pointer declarator .)
    ,               reduce using rule 94 (declarator -> pointer declarator .)
    )               reduce using rule 94 (declarator -> pointer declarator .)


state 20

    (167) strt1 -> strt1 external_declaration .

    VOID            reduce using rule 167 (strt1 -> strt1 external_declaration .)
    CHAR            reduce using rule 167 (strt1 -> strt1 external_declaration .)
    INT             reduce using rule 167 (strt1 -> strt1 external_declaration .)
    FLOAT           reduce using rule 167 (strt1 -> strt1 external_declaration .)
    TYPE_NAME       reduce using rule 167 (strt1 -> strt1 external_declaration .)
    *               reduce using rule 167 (strt1 -> strt1 external_declaration .)
    IDENTIFIER      reduce using rule 167 (strt1 -> strt1 external_declaration .)
    $end            reduce using rule 167 (strt1 -> strt1 external_declaration .)


state 21

    (101) direct_declarator -> direct_declarator ( . set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> direct_declarator ( . set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> direct_declarator ( . )
    (96) set_parameter_flag -> .

    )               shift and go to state 33
    IDENTIFIER      reduce using rule 96 (set_parameter_flag -> .)
    VOID            reduce using rule 96 (set_parameter_flag -> .)
    CHAR            reduce using rule 96 (set_parameter_flag -> .)
    INT             reduce using rule 96 (set_parameter_flag -> .)
    FLOAT           reduce using rule 96 (set_parameter_flag -> .)
    TYPE_NAME       reduce using rule 96 (set_parameter_flag -> .)

    set_parameter_flag             shift and go to state 34

state 22

    (99) direct_declarator -> direct_declarator [ . constant_expression ]
    (100) direct_declarator -> direct_declarator [ . ]
    (78) constant_expression -> . conditional_expression
    (64) conditional_expression -> . logical_or_expression
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    ]               shift and go to state 59
    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    cast_expression                shift and go to state 51
    unary_operator                 shift and go to state 66
    relational_expression          shift and go to state 50
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    logical_or_expression          shift and go to state 65
    constant_expression            shift and go to state 52
    conditional_expression         shift and go to state 67
    identifier                     shift and go to state 68

state 23

    (81) declaration -> declaration_specifiers init_declarator_list . ;
    (82) declaration -> declaration_specifiers init_declarator_list . error
    (85) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 72
    error           shift and go to state 71
    ,               shift and go to state 70


state 24

    (79) declaration -> declaration_specifiers ; .

    VOID            reduce using rule 79 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 79 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 79 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 79 (declaration -> declaration_specifiers ; .)
    TYPE_NAME       reduce using rule 79 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 79 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 79 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 79 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 79 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 79 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 79 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 79 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 79 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 79 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 79 (declaration -> declaration_specifiers ; .)
    INC_OP          reduce using rule 79 (declaration -> declaration_specifiers ; .)
    DEC_OP          reduce using rule 79 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 79 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    IDENTIFIER      reduce using rule 79 (declaration -> declaration_specifiers ; .)
    INTEGER         reduce using rule 79 (declaration -> declaration_specifiers ; .)
    DECIMALFLOAT    reduce using rule 79 (declaration -> declaration_specifiers ; .)
    FLOATVAL        reduce using rule 79 (declaration -> declaration_specifiers ; .)
    CHARACTER       reduce using rule 79 (declaration -> declaration_specifiers ; .)
    ESCAPECHAR      reduce using rule 79 (declaration -> declaration_specifiers ; .)
    STRING          reduce using rule 79 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 79 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 79 (declaration -> declaration_specifiers ; .)


state 25

    (84) init_declarator_list -> init_declarator .

    ;               reduce using rule 84 (init_declarator_list -> init_declarator .)
    error           reduce using rule 84 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 84 (init_declarator_list -> init_declarator .)


state 26

    (172) function_definition -> declaration_specifiers declarator . declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (173) function_definition -> declaration_specifiers declarator . function_scope get_labels compound_statement release_labels unset_function_scope
    (86) init_declarator -> declarator . equal_to initializer
    (87) init_declarator -> declarator .
    (140) declaration_list -> . declaration
    (141) declaration_list -> . declaration_list declaration
    (170) function_scope -> .
    (67) equal_to -> . =
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME

    ;               reduce using rule 87 (init_declarator -> declarator .)
    error           reduce using rule 87 (init_declarator -> declarator .)
    ,               reduce using rule 87 (init_declarator -> declarator .)
    {               reduce using rule 170 (function_scope -> .)
    =               shift and go to state 76
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1

    declaration                    shift and go to state 29
    type_specifier                 shift and go to state 7
    equal_to                       shift and go to state 73
    function_scope                 shift and go to state 74
    declaration_list               shift and go to state 75
    declaration_specifiers         shift and go to state 32

state 27

    (80) declaration -> declaration_specifiers error .

    VOID            reduce using rule 80 (declaration -> declaration_specifiers error .)
    CHAR            reduce using rule 80 (declaration -> declaration_specifiers error .)
    INT             reduce using rule 80 (declaration -> declaration_specifiers error .)
    FLOAT           reduce using rule 80 (declaration -> declaration_specifiers error .)
    TYPE_NAME       reduce using rule 80 (declaration -> declaration_specifiers error .)
    CASE            reduce using rule 80 (declaration -> declaration_specifiers error .)
    DEFAULT         reduce using rule 80 (declaration -> declaration_specifiers error .)
    {               reduce using rule 80 (declaration -> declaration_specifiers error .)
    ;               reduce using rule 80 (declaration -> declaration_specifiers error .)
    IF              reduce using rule 80 (declaration -> declaration_specifiers error .)
    SWITCH          reduce using rule 80 (declaration -> declaration_specifiers error .)
    WHILE           reduce using rule 80 (declaration -> declaration_specifiers error .)
    DO              reduce using rule 80 (declaration -> declaration_specifiers error .)
    FOR             reduce using rule 80 (declaration -> declaration_specifiers error .)
    CONTINUE        reduce using rule 80 (declaration -> declaration_specifiers error .)
    BREAK           reduce using rule 80 (declaration -> declaration_specifiers error .)
    RETURN          reduce using rule 80 (declaration -> declaration_specifiers error .)
    INC_OP          reduce using rule 80 (declaration -> declaration_specifiers error .)
    DEC_OP          reduce using rule 80 (declaration -> declaration_specifiers error .)
    SIZEOF          reduce using rule 80 (declaration -> declaration_specifiers error .)
    &               reduce using rule 80 (declaration -> declaration_specifiers error .)
    *               reduce using rule 80 (declaration -> declaration_specifiers error .)
    +               reduce using rule 80 (declaration -> declaration_specifiers error .)
    -               reduce using rule 80 (declaration -> declaration_specifiers error .)
    !               reduce using rule 80 (declaration -> declaration_specifiers error .)
    (               reduce using rule 80 (declaration -> declaration_specifiers error .)
    IDENTIFIER      reduce using rule 80 (declaration -> declaration_specifiers error .)
    INTEGER         reduce using rule 80 (declaration -> declaration_specifiers error .)
    DECIMALFLOAT    reduce using rule 80 (declaration -> declaration_specifiers error .)
    FLOATVAL        reduce using rule 80 (declaration -> declaration_specifiers error .)
    CHARACTER       reduce using rule 80 (declaration -> declaration_specifiers error .)
    ESCAPECHAR      reduce using rule 80 (declaration -> declaration_specifiers error .)
    STRING          reduce using rule 80 (declaration -> declaration_specifiers error .)
    }               reduce using rule 80 (declaration -> declaration_specifiers error .)
    $end            reduce using rule 80 (declaration -> declaration_specifiers error .)


state 28

    (165) strt -> strt strt1 .
    (167) strt1 -> strt1 . external_declaration
    (168) external_declaration -> . function_definition
    (169) external_declaration -> . declaration
    (172) function_definition -> . declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (173) function_definition -> . declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (174) function_definition -> . declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope
    (175) function_definition -> . declarator function_scope get_labels compound_statement release_labels unset_function_scope
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TYPE_NAME resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    $end            reduce using rule 165 (strt -> strt strt1 .)
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

  ! VOID            [ reduce using rule 165 (strt -> strt strt1 .) ]
  ! CHAR            [ reduce using rule 165 (strt -> strt strt1 .) ]
  ! INT             [ reduce using rule 165 (strt -> strt strt1 .) ]
  ! FLOAT           [ reduce using rule 165 (strt -> strt strt1 .) ]
  ! TYPE_NAME       [ reduce using rule 165 (strt -> strt strt1 .) ]
  ! *               [ reduce using rule 165 (strt -> strt strt1 .) ]
  ! IDENTIFIER      [ reduce using rule 165 (strt -> strt strt1 .) ]

    declaration                    shift and go to state 3
    pointer                        shift and go to state 5
    external_declaration           shift and go to state 20
    type_specifier                 shift and go to state 7
    direct_declarator              shift and go to state 11
    declaration_specifiers         shift and go to state 12
    function_definition            shift and go to state 13
    declarator                     shift and go to state 17
    identifier                     shift and go to state 18

state 29

    (140) declaration_list -> declaration .

    VOID            reduce using rule 140 (declaration_list -> declaration .)
    CHAR            reduce using rule 140 (declaration_list -> declaration .)
    INT             reduce using rule 140 (declaration_list -> declaration .)
    FLOAT           reduce using rule 140 (declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 140 (declaration_list -> declaration .)
    {               reduce using rule 140 (declaration_list -> declaration .)
    CASE            reduce using rule 140 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 140 (declaration_list -> declaration .)
    ;               reduce using rule 140 (declaration_list -> declaration .)
    IF              reduce using rule 140 (declaration_list -> declaration .)
    SWITCH          reduce using rule 140 (declaration_list -> declaration .)
    WHILE           reduce using rule 140 (declaration_list -> declaration .)
    DO              reduce using rule 140 (declaration_list -> declaration .)
    FOR             reduce using rule 140 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 140 (declaration_list -> declaration .)
    BREAK           reduce using rule 140 (declaration_list -> declaration .)
    RETURN          reduce using rule 140 (declaration_list -> declaration .)
    INC_OP          reduce using rule 140 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 140 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 140 (declaration_list -> declaration .)
    &               reduce using rule 140 (declaration_list -> declaration .)
    *               reduce using rule 140 (declaration_list -> declaration .)
    +               reduce using rule 140 (declaration_list -> declaration .)
    -               reduce using rule 140 (declaration_list -> declaration .)
    !               reduce using rule 140 (declaration_list -> declaration .)
    (               reduce using rule 140 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 140 (declaration_list -> declaration .)
    INTEGER         reduce using rule 140 (declaration_list -> declaration .)
    DECIMALFLOAT    reduce using rule 140 (declaration_list -> declaration .)
    FLOATVAL        reduce using rule 140 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 140 (declaration_list -> declaration .)
    ESCAPECHAR      reduce using rule 140 (declaration_list -> declaration .)
    STRING          reduce using rule 140 (declaration_list -> declaration .)
    }               reduce using rule 140 (declaration_list -> declaration .)


state 30

    (175) function_definition -> declarator function_scope . get_labels compound_statement release_labels unset_function_scope
    (147) get_labels -> .

    {               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 77

state 31

    (174) function_definition -> declarator declaration_list . function_scope get_labels compound_statement release_labels unset_function_scope
    (141) declaration_list -> declaration_list . declaration
    (170) function_scope -> .
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME

    {               reduce using rule 170 (function_scope -> .)
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1

    declaration                    shift and go to state 78
    type_specifier                 shift and go to state 7
    function_scope                 shift and go to state 79
    declaration_specifiers         shift and go to state 32

state 32

    (79) declaration -> declaration_specifiers . ;
    (80) declaration -> declaration_specifiers . error
    (81) declaration -> declaration_specifiers . init_declarator_list ;
    (82) declaration -> declaration_specifiers . init_declarator_list error
    (84) init_declarator_list -> . init_declarator
    (85) init_declarator_list -> . init_declarator_list , init_declarator
    (86) init_declarator -> . declarator equal_to initializer
    (87) init_declarator -> . declarator
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

    ;               shift and go to state 24
    error           shift and go to state 27
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    identifier                     shift and go to state 18
    direct_declarator              shift and go to state 11
    init_declarator                shift and go to state 25
    declarator                     shift and go to state 80
    init_declarator_list           shift and go to state 23
    pointer                        shift and go to state 5

state 33

    (103) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    FLOAT           reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    TYPE_NAME       reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)
    error           reduce using rule 103 (direct_declarator -> direct_declarator ( ) .)


state 34

    (101) direct_declarator -> direct_declarator ( set_parameter_flag . parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> direct_declarator ( set_parameter_flag . identifier_list unset_parameter_flag )
    (105) parameter_type_list -> . parameter_list
    (111) identifier_list -> . identifier
    (112) identifier_list -> . identifier_list , identifier
    (106) parameter_list -> . parameter_declaration
    (107) parameter_list -> . parameter_list , parameter_declaration
    (3) identifier -> . IDENTIFIER
    (108) parameter_declaration -> . declaration_specifiers declarator
    (109) parameter_declaration -> . declaration_specifiers abstract_declarator
    (110) parameter_declaration -> . declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME

    IDENTIFIER      shift and go to state 10
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1

    identifier                     shift and go to state 81
    parameter_list                 shift and go to state 82
    parameter_type_list            shift and go to state 83
    parameter_declaration          shift and go to state 85
    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 84
    identifier_list                shift and go to state 86

state 35

    (11) primary_expression -> constant .

    [               reduce using rule 11 (primary_expression -> constant .)
    (               reduce using rule 11 (primary_expression -> constant .)
    .               reduce using rule 11 (primary_expression -> constant .)
    PTR_OP          reduce using rule 11 (primary_expression -> constant .)
    INC_OP          reduce using rule 11 (primary_expression -> constant .)
    DEC_OP          reduce using rule 11 (primary_expression -> constant .)
    *               reduce using rule 11 (primary_expression -> constant .)
    /               reduce using rule 11 (primary_expression -> constant .)
    %               reduce using rule 11 (primary_expression -> constant .)
    +               reduce using rule 11 (primary_expression -> constant .)
    -               reduce using rule 11 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 11 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 11 (primary_expression -> constant .)
    <               reduce using rule 11 (primary_expression -> constant .)
    >               reduce using rule 11 (primary_expression -> constant .)
    LE_OP           reduce using rule 11 (primary_expression -> constant .)
    GE_OP           reduce using rule 11 (primary_expression -> constant .)
    EQ_OP           reduce using rule 11 (primary_expression -> constant .)
    NE_OP           reduce using rule 11 (primary_expression -> constant .)
    &               reduce using rule 11 (primary_expression -> constant .)
    ^               reduce using rule 11 (primary_expression -> constant .)
    |               reduce using rule 11 (primary_expression -> constant .)
    AND_OP          reduce using rule 11 (primary_expression -> constant .)
    OR_OP           reduce using rule 11 (primary_expression -> constant .)
    ]               reduce using rule 11 (primary_expression -> constant .)
    )               reduce using rule 11 (primary_expression -> constant .)
    ,               reduce using rule 11 (primary_expression -> constant .)
    ;               reduce using rule 11 (primary_expression -> constant .)
    error           reduce using rule 11 (primary_expression -> constant .)
    }               reduce using rule 11 (primary_expression -> constant .)
    :               reduce using rule 11 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 11 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 11 (primary_expression -> constant .)
    =               reduce using rule 11 (primary_expression -> constant .)


state 36

    (34) cast_expression -> unary_expression .

    *               reduce using rule 34 (cast_expression -> unary_expression .)
    /               reduce using rule 34 (cast_expression -> unary_expression .)
    %               reduce using rule 34 (cast_expression -> unary_expression .)
    +               reduce using rule 34 (cast_expression -> unary_expression .)
    -               reduce using rule 34 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 34 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 34 (cast_expression -> unary_expression .)
    <               reduce using rule 34 (cast_expression -> unary_expression .)
    >               reduce using rule 34 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    &               reduce using rule 34 (cast_expression -> unary_expression .)
    ^               reduce using rule 34 (cast_expression -> unary_expression .)
    |               reduce using rule 34 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 34 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    ]               reduce using rule 34 (cast_expression -> unary_expression .)
    )               reduce using rule 34 (cast_expression -> unary_expression .)
    ,               reduce using rule 34 (cast_expression -> unary_expression .)
    ;               reduce using rule 34 (cast_expression -> unary_expression .)
    error           reduce using rule 34 (cast_expression -> unary_expression .)
    }               reduce using rule 34 (cast_expression -> unary_expression .)
    :               reduce using rule 34 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 34 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 34 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 34 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 34 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 34 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 34 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 34 (cast_expression -> unary_expression .)
    =               reduce using rule 34 (cast_expression -> unary_expression .)


state 37

    (25) unary_expression -> DEC_OP . unary_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 88
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 87
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 38

    (58) inclusive_or_expression -> exclusive_or_expression .
    (57) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    error           reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 58 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 89


state 39

    (7) constant -> CHARACTER .

    [               reduce using rule 7 (constant -> CHARACTER .)
    (               reduce using rule 7 (constant -> CHARACTER .)
    .               reduce using rule 7 (constant -> CHARACTER .)
    PTR_OP          reduce using rule 7 (constant -> CHARACTER .)
    INC_OP          reduce using rule 7 (constant -> CHARACTER .)
    DEC_OP          reduce using rule 7 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 7 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 7 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 7 (constant -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 7 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 7 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 7 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 7 (constant -> CHARACTER .)
    =               reduce using rule 7 (constant -> CHARACTER .)
    *               reduce using rule 7 (constant -> CHARACTER .)
    /               reduce using rule 7 (constant -> CHARACTER .)
    %               reduce using rule 7 (constant -> CHARACTER .)
    +               reduce using rule 7 (constant -> CHARACTER .)
    -               reduce using rule 7 (constant -> CHARACTER .)
    LEFT_OP         reduce using rule 7 (constant -> CHARACTER .)
    RIGHT_OP        reduce using rule 7 (constant -> CHARACTER .)
    <               reduce using rule 7 (constant -> CHARACTER .)
    >               reduce using rule 7 (constant -> CHARACTER .)
    LE_OP           reduce using rule 7 (constant -> CHARACTER .)
    GE_OP           reduce using rule 7 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 7 (constant -> CHARACTER .)
    NE_OP           reduce using rule 7 (constant -> CHARACTER .)
    &               reduce using rule 7 (constant -> CHARACTER .)
    ^               reduce using rule 7 (constant -> CHARACTER .)
    |               reduce using rule 7 (constant -> CHARACTER .)
    AND_OP          reduce using rule 7 (constant -> CHARACTER .)
    OR_OP           reduce using rule 7 (constant -> CHARACTER .)
    )               reduce using rule 7 (constant -> CHARACTER .)
    ,               reduce using rule 7 (constant -> CHARACTER .)
    ]               reduce using rule 7 (constant -> CHARACTER .)
    ;               reduce using rule 7 (constant -> CHARACTER .)
    error           reduce using rule 7 (constant -> CHARACTER .)
    }               reduce using rule 7 (constant -> CHARACTER .)
    :               reduce using rule 7 (constant -> CHARACTER .)


state 40

    (8) constant -> ESCAPECHAR .

    [               reduce using rule 8 (constant -> ESCAPECHAR .)
    (               reduce using rule 8 (constant -> ESCAPECHAR .)
    .               reduce using rule 8 (constant -> ESCAPECHAR .)
    PTR_OP          reduce using rule 8 (constant -> ESCAPECHAR .)
    INC_OP          reduce using rule 8 (constant -> ESCAPECHAR .)
    DEC_OP          reduce using rule 8 (constant -> ESCAPECHAR .)
    MUL_ASSIGN      reduce using rule 8 (constant -> ESCAPECHAR .)
    DIV_ASSIGN      reduce using rule 8 (constant -> ESCAPECHAR .)
    MOD_ASSIGN      reduce using rule 8 (constant -> ESCAPECHAR .)
    ADD_ASSIGN      reduce using rule 8 (constant -> ESCAPECHAR .)
    SUB_ASSIGN      reduce using rule 8 (constant -> ESCAPECHAR .)
    LEFT_ASSIGN     reduce using rule 8 (constant -> ESCAPECHAR .)
    RIGHT_ASSIGN    reduce using rule 8 (constant -> ESCAPECHAR .)
    =               reduce using rule 8 (constant -> ESCAPECHAR .)
    *               reduce using rule 8 (constant -> ESCAPECHAR .)
    /               reduce using rule 8 (constant -> ESCAPECHAR .)
    %               reduce using rule 8 (constant -> ESCAPECHAR .)
    +               reduce using rule 8 (constant -> ESCAPECHAR .)
    -               reduce using rule 8 (constant -> ESCAPECHAR .)
    LEFT_OP         reduce using rule 8 (constant -> ESCAPECHAR .)
    RIGHT_OP        reduce using rule 8 (constant -> ESCAPECHAR .)
    <               reduce using rule 8 (constant -> ESCAPECHAR .)
    >               reduce using rule 8 (constant -> ESCAPECHAR .)
    LE_OP           reduce using rule 8 (constant -> ESCAPECHAR .)
    GE_OP           reduce using rule 8 (constant -> ESCAPECHAR .)
    EQ_OP           reduce using rule 8 (constant -> ESCAPECHAR .)
    NE_OP           reduce using rule 8 (constant -> ESCAPECHAR .)
    &               reduce using rule 8 (constant -> ESCAPECHAR .)
    ^               reduce using rule 8 (constant -> ESCAPECHAR .)
    |               reduce using rule 8 (constant -> ESCAPECHAR .)
    AND_OP          reduce using rule 8 (constant -> ESCAPECHAR .)
    OR_OP           reduce using rule 8 (constant -> ESCAPECHAR .)
    )               reduce using rule 8 (constant -> ESCAPECHAR .)
    ,               reduce using rule 8 (constant -> ESCAPECHAR .)
    ]               reduce using rule 8 (constant -> ESCAPECHAR .)
    ;               reduce using rule 8 (constant -> ESCAPECHAR .)
    error           reduce using rule 8 (constant -> ESCAPECHAR .)
    }               reduce using rule 8 (constant -> ESCAPECHAR .)
    :               reduce using rule 8 (constant -> ESCAPECHAR .)


state 41

    (27) unary_expression -> SIZEOF . unary_expression
    (28) unary_expression -> SIZEOF . ( type_name )
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 91
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 90
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 42

    (56) exclusive_or_expression -> and_expression .
    (55) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 56 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 56 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    error           reduce using rule 56 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 56 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 92


state 43

    (33) unary_operator -> ! .

    (               reduce using rule 33 (unary_operator -> ! .)
    INC_OP          reduce using rule 33 (unary_operator -> ! .)
    DEC_OP          reduce using rule 33 (unary_operator -> ! .)
    SIZEOF          reduce using rule 33 (unary_operator -> ! .)
    &               reduce using rule 33 (unary_operator -> ! .)
    *               reduce using rule 33 (unary_operator -> ! .)
    +               reduce using rule 33 (unary_operator -> ! .)
    -               reduce using rule 33 (unary_operator -> ! .)
    !               reduce using rule 33 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 33 (unary_operator -> ! .)
    INTEGER         reduce using rule 33 (unary_operator -> ! .)
    DECIMALFLOAT    reduce using rule 33 (unary_operator -> ! .)
    FLOATVAL        reduce using rule 33 (unary_operator -> ! .)
    CHARACTER       reduce using rule 33 (unary_operator -> ! .)
    ESCAPECHAR      reduce using rule 33 (unary_operator -> ! .)
    STRING          reduce using rule 33 (unary_operator -> ! .)


state 44

    (29) unary_operator -> & .

    (               reduce using rule 29 (unary_operator -> & .)
    INC_OP          reduce using rule 29 (unary_operator -> & .)
    DEC_OP          reduce using rule 29 (unary_operator -> & .)
    SIZEOF          reduce using rule 29 (unary_operator -> & .)
    &               reduce using rule 29 (unary_operator -> & .)
    *               reduce using rule 29 (unary_operator -> & .)
    +               reduce using rule 29 (unary_operator -> & .)
    -               reduce using rule 29 (unary_operator -> & .)
    !               reduce using rule 29 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 29 (unary_operator -> & .)
    INTEGER         reduce using rule 29 (unary_operator -> & .)
    DECIMALFLOAT    reduce using rule 29 (unary_operator -> & .)
    FLOATVAL        reduce using rule 29 (unary_operator -> & .)
    CHARACTER       reduce using rule 29 (unary_operator -> & .)
    ESCAPECHAR      reduce using rule 29 (unary_operator -> & .)
    STRING          reduce using rule 29 (unary_operator -> & .)


state 45

    (60) logical_and_expression -> inclusive_or_expression .
    (59) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    error           reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 60 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 93


state 46

    (35) cast_expression -> ( . type_name ) cast_expression
    (12) primary_expression -> ( . expression )
    (113) type_name -> . specifier_qualifier_list
    (114) type_name -> . specifier_qualifier_list abstract_declarator
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (93) specifier_qualifier_list -> . type_specifier
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    type_specifier                 shift and go to state 95
    inclusive_or_expression        shift and go to state 45
    type_name                      shift and go to state 97
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    specifier_qualifier_list       shift and go to state 100
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 99

state 47

    (31) unary_operator -> + .

    (               reduce using rule 31 (unary_operator -> + .)
    INC_OP          reduce using rule 31 (unary_operator -> + .)
    DEC_OP          reduce using rule 31 (unary_operator -> + .)
    SIZEOF          reduce using rule 31 (unary_operator -> + .)
    &               reduce using rule 31 (unary_operator -> + .)
    *               reduce using rule 31 (unary_operator -> + .)
    +               reduce using rule 31 (unary_operator -> + .)
    -               reduce using rule 31 (unary_operator -> + .)
    !               reduce using rule 31 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 31 (unary_operator -> + .)
    INTEGER         reduce using rule 31 (unary_operator -> + .)
    DECIMALFLOAT    reduce using rule 31 (unary_operator -> + .)
    FLOATVAL        reduce using rule 31 (unary_operator -> + .)
    CHARACTER       reduce using rule 31 (unary_operator -> + .)
    ESCAPECHAR      reduce using rule 31 (unary_operator -> + .)
    STRING          reduce using rule 31 (unary_operator -> + .)


state 48

    (30) unary_operator -> * .

    (               reduce using rule 30 (unary_operator -> * .)
    INC_OP          reduce using rule 30 (unary_operator -> * .)
    DEC_OP          reduce using rule 30 (unary_operator -> * .)
    SIZEOF          reduce using rule 30 (unary_operator -> * .)
    &               reduce using rule 30 (unary_operator -> * .)
    *               reduce using rule 30 (unary_operator -> * .)
    +               reduce using rule 30 (unary_operator -> * .)
    -               reduce using rule 30 (unary_operator -> * .)
    !               reduce using rule 30 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 30 (unary_operator -> * .)
    INTEGER         reduce using rule 30 (unary_operator -> * .)
    DECIMALFLOAT    reduce using rule 30 (unary_operator -> * .)
    FLOATVAL        reduce using rule 30 (unary_operator -> * .)
    CHARACTER       reduce using rule 30 (unary_operator -> * .)
    ESCAPECHAR      reduce using rule 30 (unary_operator -> * .)
    STRING          reduce using rule 30 (unary_operator -> * .)


state 49

    (32) unary_operator -> - .

    (               reduce using rule 32 (unary_operator -> - .)
    INC_OP          reduce using rule 32 (unary_operator -> - .)
    DEC_OP          reduce using rule 32 (unary_operator -> - .)
    SIZEOF          reduce using rule 32 (unary_operator -> - .)
    &               reduce using rule 32 (unary_operator -> - .)
    *               reduce using rule 32 (unary_operator -> - .)
    +               reduce using rule 32 (unary_operator -> - .)
    -               reduce using rule 32 (unary_operator -> - .)
    !               reduce using rule 32 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 32 (unary_operator -> - .)
    INTEGER         reduce using rule 32 (unary_operator -> - .)
    DECIMALFLOAT    reduce using rule 32 (unary_operator -> - .)
    FLOATVAL        reduce using rule 32 (unary_operator -> - .)
    CHARACTER       reduce using rule 32 (unary_operator -> - .)
    ESCAPECHAR      reduce using rule 32 (unary_operator -> - .)
    STRING          reduce using rule 32 (unary_operator -> - .)


state 50

    (51) equality_expression -> relational_expression .
    (47) relational_expression -> relational_expression . < shift_expression
    (48) relational_expression -> relational_expression . > shift_expression
    (49) relational_expression -> relational_expression . LE_OP shift_expression
    (50) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 51 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 51 (equality_expression -> relational_expression .)
    &               reduce using rule 51 (equality_expression -> relational_expression .)
    ^               reduce using rule 51 (equality_expression -> relational_expression .)
    |               reduce using rule 51 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 51 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 51 (equality_expression -> relational_expression .)
    ;               reduce using rule 51 (equality_expression -> relational_expression .)
    error           reduce using rule 51 (equality_expression -> relational_expression .)
    ,               reduce using rule 51 (equality_expression -> relational_expression .)
    ]               reduce using rule 51 (equality_expression -> relational_expression .)
    )               reduce using rule 51 (equality_expression -> relational_expression .)
    }               reduce using rule 51 (equality_expression -> relational_expression .)
    :               reduce using rule 51 (equality_expression -> relational_expression .)
    <               shift and go to state 103
    >               shift and go to state 105
    LE_OP           shift and go to state 102
    GE_OP           shift and go to state 104


state 51

    (36) multiplicative_expression -> cast_expression .

    *               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 36 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 36 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 36 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 36 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 36 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 36 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 36 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 36 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    error           reduce using rule 36 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 36 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 36 (multiplicative_expression -> cast_expression .)


state 52

    (99) direct_declarator -> direct_declarator [ constant_expression . ]

    ]               shift and go to state 106


state 53

    (9) constant -> STRING .

    [               reduce using rule 9 (constant -> STRING .)
    (               reduce using rule 9 (constant -> STRING .)
    .               reduce using rule 9 (constant -> STRING .)
    PTR_OP          reduce using rule 9 (constant -> STRING .)
    INC_OP          reduce using rule 9 (constant -> STRING .)
    DEC_OP          reduce using rule 9 (constant -> STRING .)
    MUL_ASSIGN      reduce using rule 9 (constant -> STRING .)
    DIV_ASSIGN      reduce using rule 9 (constant -> STRING .)
    MOD_ASSIGN      reduce using rule 9 (constant -> STRING .)
    ADD_ASSIGN      reduce using rule 9 (constant -> STRING .)
    SUB_ASSIGN      reduce using rule 9 (constant -> STRING .)
    LEFT_ASSIGN     reduce using rule 9 (constant -> STRING .)
    RIGHT_ASSIGN    reduce using rule 9 (constant -> STRING .)
    =               reduce using rule 9 (constant -> STRING .)
    *               reduce using rule 9 (constant -> STRING .)
    /               reduce using rule 9 (constant -> STRING .)
    %               reduce using rule 9 (constant -> STRING .)
    +               reduce using rule 9 (constant -> STRING .)
    -               reduce using rule 9 (constant -> STRING .)
    LEFT_OP         reduce using rule 9 (constant -> STRING .)
    RIGHT_OP        reduce using rule 9 (constant -> STRING .)
    <               reduce using rule 9 (constant -> STRING .)
    >               reduce using rule 9 (constant -> STRING .)
    LE_OP           reduce using rule 9 (constant -> STRING .)
    GE_OP           reduce using rule 9 (constant -> STRING .)
    EQ_OP           reduce using rule 9 (constant -> STRING .)
    NE_OP           reduce using rule 9 (constant -> STRING .)
    &               reduce using rule 9 (constant -> STRING .)
    ^               reduce using rule 9 (constant -> STRING .)
    |               reduce using rule 9 (constant -> STRING .)
    AND_OP          reduce using rule 9 (constant -> STRING .)
    OR_OP           reduce using rule 9 (constant -> STRING .)
    )               reduce using rule 9 (constant -> STRING .)
    ,               reduce using rule 9 (constant -> STRING .)
    ]               reduce using rule 9 (constant -> STRING .)
    ;               reduce using rule 9 (constant -> STRING .)
    error           reduce using rule 9 (constant -> STRING .)
    }               reduce using rule 9 (constant -> STRING .)
    :               reduce using rule 9 (constant -> STRING .)


state 54

    (5) constant -> DECIMALFLOAT .

    [               reduce using rule 5 (constant -> DECIMALFLOAT .)
    (               reduce using rule 5 (constant -> DECIMALFLOAT .)
    .               reduce using rule 5 (constant -> DECIMALFLOAT .)
    PTR_OP          reduce using rule 5 (constant -> DECIMALFLOAT .)
    INC_OP          reduce using rule 5 (constant -> DECIMALFLOAT .)
    DEC_OP          reduce using rule 5 (constant -> DECIMALFLOAT .)
    MUL_ASSIGN      reduce using rule 5 (constant -> DECIMALFLOAT .)
    DIV_ASSIGN      reduce using rule 5 (constant -> DECIMALFLOAT .)
    MOD_ASSIGN      reduce using rule 5 (constant -> DECIMALFLOAT .)
    ADD_ASSIGN      reduce using rule 5 (constant -> DECIMALFLOAT .)
    SUB_ASSIGN      reduce using rule 5 (constant -> DECIMALFLOAT .)
    LEFT_ASSIGN     reduce using rule 5 (constant -> DECIMALFLOAT .)
    RIGHT_ASSIGN    reduce using rule 5 (constant -> DECIMALFLOAT .)
    =               reduce using rule 5 (constant -> DECIMALFLOAT .)
    *               reduce using rule 5 (constant -> DECIMALFLOAT .)
    /               reduce using rule 5 (constant -> DECIMALFLOAT .)
    %               reduce using rule 5 (constant -> DECIMALFLOAT .)
    +               reduce using rule 5 (constant -> DECIMALFLOAT .)
    -               reduce using rule 5 (constant -> DECIMALFLOAT .)
    LEFT_OP         reduce using rule 5 (constant -> DECIMALFLOAT .)
    RIGHT_OP        reduce using rule 5 (constant -> DECIMALFLOAT .)
    <               reduce using rule 5 (constant -> DECIMALFLOAT .)
    >               reduce using rule 5 (constant -> DECIMALFLOAT .)
    LE_OP           reduce using rule 5 (constant -> DECIMALFLOAT .)
    GE_OP           reduce using rule 5 (constant -> DECIMALFLOAT .)
    EQ_OP           reduce using rule 5 (constant -> DECIMALFLOAT .)
    NE_OP           reduce using rule 5 (constant -> DECIMALFLOAT .)
    &               reduce using rule 5 (constant -> DECIMALFLOAT .)
    ^               reduce using rule 5 (constant -> DECIMALFLOAT .)
    |               reduce using rule 5 (constant -> DECIMALFLOAT .)
    AND_OP          reduce using rule 5 (constant -> DECIMALFLOAT .)
    OR_OP           reduce using rule 5 (constant -> DECIMALFLOAT .)
    )               reduce using rule 5 (constant -> DECIMALFLOAT .)
    ,               reduce using rule 5 (constant -> DECIMALFLOAT .)
    ]               reduce using rule 5 (constant -> DECIMALFLOAT .)
    ;               reduce using rule 5 (constant -> DECIMALFLOAT .)
    error           reduce using rule 5 (constant -> DECIMALFLOAT .)
    }               reduce using rule 5 (constant -> DECIMALFLOAT .)
    :               reduce using rule 5 (constant -> DECIMALFLOAT .)


state 55

    (43) shift_expression -> additive_expression .
    (41) additive_expression -> additive_expression . + multiplicative_expression
    (42) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 43 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 43 (shift_expression -> additive_expression .)
    <               reduce using rule 43 (shift_expression -> additive_expression .)
    >               reduce using rule 43 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 43 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 43 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 43 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 43 (shift_expression -> additive_expression .)
    &               reduce using rule 43 (shift_expression -> additive_expression .)
    ^               reduce using rule 43 (shift_expression -> additive_expression .)
    |               reduce using rule 43 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 43 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 43 (shift_expression -> additive_expression .)
    )               reduce using rule 43 (shift_expression -> additive_expression .)
    ,               reduce using rule 43 (shift_expression -> additive_expression .)
    ]               reduce using rule 43 (shift_expression -> additive_expression .)
    ;               reduce using rule 43 (shift_expression -> additive_expression .)
    error           reduce using rule 43 (shift_expression -> additive_expression .)
    }               reduce using rule 43 (shift_expression -> additive_expression .)
    :               reduce using rule 43 (shift_expression -> additive_expression .)
    +               shift and go to state 107
    -               shift and go to state 108


state 56

    (13) postfix_expression -> primary_expression .

    [               reduce using rule 13 (postfix_expression -> primary_expression .)
    (               reduce using rule 13 (postfix_expression -> primary_expression .)
    .               reduce using rule 13 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 13 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 13 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 13 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> primary_expression .)
    =               reduce using rule 13 (postfix_expression -> primary_expression .)
    *               reduce using rule 13 (postfix_expression -> primary_expression .)
    /               reduce using rule 13 (postfix_expression -> primary_expression .)
    %               reduce using rule 13 (postfix_expression -> primary_expression .)
    +               reduce using rule 13 (postfix_expression -> primary_expression .)
    -               reduce using rule 13 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> primary_expression .)
    <               reduce using rule 13 (postfix_expression -> primary_expression .)
    >               reduce using rule 13 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 13 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 13 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 13 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 13 (postfix_expression -> primary_expression .)
    &               reduce using rule 13 (postfix_expression -> primary_expression .)
    ^               reduce using rule 13 (postfix_expression -> primary_expression .)
    |               reduce using rule 13 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 13 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 13 (postfix_expression -> primary_expression .)
    )               reduce using rule 13 (postfix_expression -> primary_expression .)
    ,               reduce using rule 13 (postfix_expression -> primary_expression .)
    ;               reduce using rule 13 (postfix_expression -> primary_expression .)
    error           reduce using rule 13 (postfix_expression -> primary_expression .)
    ]               reduce using rule 13 (postfix_expression -> primary_expression .)
    }               reduce using rule 13 (postfix_expression -> primary_expression .)
    :               reduce using rule 13 (postfix_expression -> primary_expression .)


state 57

    (4) constant -> INTEGER .

    [               reduce using rule 4 (constant -> INTEGER .)
    (               reduce using rule 4 (constant -> INTEGER .)
    .               reduce using rule 4 (constant -> INTEGER .)
    PTR_OP          reduce using rule 4 (constant -> INTEGER .)
    INC_OP          reduce using rule 4 (constant -> INTEGER .)
    DEC_OP          reduce using rule 4 (constant -> INTEGER .)
    MUL_ASSIGN      reduce using rule 4 (constant -> INTEGER .)
    DIV_ASSIGN      reduce using rule 4 (constant -> INTEGER .)
    MOD_ASSIGN      reduce using rule 4 (constant -> INTEGER .)
    ADD_ASSIGN      reduce using rule 4 (constant -> INTEGER .)
    SUB_ASSIGN      reduce using rule 4 (constant -> INTEGER .)
    LEFT_ASSIGN     reduce using rule 4 (constant -> INTEGER .)
    RIGHT_ASSIGN    reduce using rule 4 (constant -> INTEGER .)
    =               reduce using rule 4 (constant -> INTEGER .)
    *               reduce using rule 4 (constant -> INTEGER .)
    /               reduce using rule 4 (constant -> INTEGER .)
    %               reduce using rule 4 (constant -> INTEGER .)
    +               reduce using rule 4 (constant -> INTEGER .)
    -               reduce using rule 4 (constant -> INTEGER .)
    LEFT_OP         reduce using rule 4 (constant -> INTEGER .)
    RIGHT_OP        reduce using rule 4 (constant -> INTEGER .)
    <               reduce using rule 4 (constant -> INTEGER .)
    >               reduce using rule 4 (constant -> INTEGER .)
    LE_OP           reduce using rule 4 (constant -> INTEGER .)
    GE_OP           reduce using rule 4 (constant -> INTEGER .)
    EQ_OP           reduce using rule 4 (constant -> INTEGER .)
    NE_OP           reduce using rule 4 (constant -> INTEGER .)
    &               reduce using rule 4 (constant -> INTEGER .)
    ^               reduce using rule 4 (constant -> INTEGER .)
    |               reduce using rule 4 (constant -> INTEGER .)
    AND_OP          reduce using rule 4 (constant -> INTEGER .)
    OR_OP           reduce using rule 4 (constant -> INTEGER .)
    )               reduce using rule 4 (constant -> INTEGER .)
    ,               reduce using rule 4 (constant -> INTEGER .)
    ]               reduce using rule 4 (constant -> INTEGER .)
    ;               reduce using rule 4 (constant -> INTEGER .)
    error           reduce using rule 4 (constant -> INTEGER .)
    }               reduce using rule 4 (constant -> INTEGER .)
    :               reduce using rule 4 (constant -> INTEGER .)


state 58

    (62) logical_or_expression -> logical_and_expression .
    (61) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    OR_OP           reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    error           reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 62 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 109


state 59

    (100) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    FLOAT           reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    TYPE_NAME       reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)
    error           reduce using rule 100 (direct_declarator -> direct_declarator [ ] .)


state 60

    (46) relational_expression -> shift_expression .
    (44) shift_expression -> shift_expression . LEFT_OP additive_expression
    (45) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 46 (relational_expression -> shift_expression .)
    >               reduce using rule 46 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 46 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 46 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 46 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 46 (relational_expression -> shift_expression .)
    &               reduce using rule 46 (relational_expression -> shift_expression .)
    ^               reduce using rule 46 (relational_expression -> shift_expression .)
    |               reduce using rule 46 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 46 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 46 (relational_expression -> shift_expression .)
    )               reduce using rule 46 (relational_expression -> shift_expression .)
    ,               reduce using rule 46 (relational_expression -> shift_expression .)
    ;               reduce using rule 46 (relational_expression -> shift_expression .)
    error           reduce using rule 46 (relational_expression -> shift_expression .)
    ]               reduce using rule 46 (relational_expression -> shift_expression .)
    }               reduce using rule 46 (relational_expression -> shift_expression .)
    :               reduce using rule 46 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 110
    RIGHT_OP        shift and go to state 111


state 61

    (54) and_expression -> equality_expression .
    (52) equality_expression -> equality_expression . EQ_OP relational_expression
    (53) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 54 (and_expression -> equality_expression .)
    ^               reduce using rule 54 (and_expression -> equality_expression .)
    |               reduce using rule 54 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 54 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 54 (and_expression -> equality_expression .)
    )               reduce using rule 54 (and_expression -> equality_expression .)
    ,               reduce using rule 54 (and_expression -> equality_expression .)
    ]               reduce using rule 54 (and_expression -> equality_expression .)
    ;               reduce using rule 54 (and_expression -> equality_expression .)
    error           reduce using rule 54 (and_expression -> equality_expression .)
    }               reduce using rule 54 (and_expression -> equality_expression .)
    :               reduce using rule 54 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 113
    NE_OP           shift and go to state 112


state 62

    (6) constant -> FLOATVAL .

    [               reduce using rule 6 (constant -> FLOATVAL .)
    (               reduce using rule 6 (constant -> FLOATVAL .)
    .               reduce using rule 6 (constant -> FLOATVAL .)
    PTR_OP          reduce using rule 6 (constant -> FLOATVAL .)
    INC_OP          reduce using rule 6 (constant -> FLOATVAL .)
    DEC_OP          reduce using rule 6 (constant -> FLOATVAL .)
    MUL_ASSIGN      reduce using rule 6 (constant -> FLOATVAL .)
    DIV_ASSIGN      reduce using rule 6 (constant -> FLOATVAL .)
    MOD_ASSIGN      reduce using rule 6 (constant -> FLOATVAL .)
    ADD_ASSIGN      reduce using rule 6 (constant -> FLOATVAL .)
    SUB_ASSIGN      reduce using rule 6 (constant -> FLOATVAL .)
    LEFT_ASSIGN     reduce using rule 6 (constant -> FLOATVAL .)
    RIGHT_ASSIGN    reduce using rule 6 (constant -> FLOATVAL .)
    =               reduce using rule 6 (constant -> FLOATVAL .)
    *               reduce using rule 6 (constant -> FLOATVAL .)
    /               reduce using rule 6 (constant -> FLOATVAL .)
    %               reduce using rule 6 (constant -> FLOATVAL .)
    +               reduce using rule 6 (constant -> FLOATVAL .)
    -               reduce using rule 6 (constant -> FLOATVAL .)
    LEFT_OP         reduce using rule 6 (constant -> FLOATVAL .)
    RIGHT_OP        reduce using rule 6 (constant -> FLOATVAL .)
    <               reduce using rule 6 (constant -> FLOATVAL .)
    >               reduce using rule 6 (constant -> FLOATVAL .)
    LE_OP           reduce using rule 6 (constant -> FLOATVAL .)
    GE_OP           reduce using rule 6 (constant -> FLOATVAL .)
    EQ_OP           reduce using rule 6 (constant -> FLOATVAL .)
    NE_OP           reduce using rule 6 (constant -> FLOATVAL .)
    &               reduce using rule 6 (constant -> FLOATVAL .)
    ^               reduce using rule 6 (constant -> FLOATVAL .)
    |               reduce using rule 6 (constant -> FLOATVAL .)
    AND_OP          reduce using rule 6 (constant -> FLOATVAL .)
    OR_OP           reduce using rule 6 (constant -> FLOATVAL .)
    )               reduce using rule 6 (constant -> FLOATVAL .)
    ,               reduce using rule 6 (constant -> FLOATVAL .)
    ]               reduce using rule 6 (constant -> FLOATVAL .)
    ;               reduce using rule 6 (constant -> FLOATVAL .)
    error           reduce using rule 6 (constant -> FLOATVAL .)
    }               reduce using rule 6 (constant -> FLOATVAL .)
    :               reduce using rule 6 (constant -> FLOATVAL .)


state 63

    (23) unary_expression -> postfix_expression .
    (14) postfix_expression -> postfix_expression . [ expression ]
    (15) postfix_expression -> postfix_expression . ( )
    (16) postfix_expression -> postfix_expression . ( argument_expression_list )
    (17) postfix_expression -> postfix_expression . . identifier
    (18) postfix_expression -> postfix_expression . PTR_OP identifier
    (19) postfix_expression -> postfix_expression . INC_OP
    (20) postfix_expression -> postfix_expression . DEC_OP

    MUL_ASSIGN      reduce using rule 23 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 23 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 23 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 23 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 23 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 23 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 23 (unary_expression -> postfix_expression .)
    =               reduce using rule 23 (unary_expression -> postfix_expression .)
    *               reduce using rule 23 (unary_expression -> postfix_expression .)
    /               reduce using rule 23 (unary_expression -> postfix_expression .)
    %               reduce using rule 23 (unary_expression -> postfix_expression .)
    +               reduce using rule 23 (unary_expression -> postfix_expression .)
    -               reduce using rule 23 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 23 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 23 (unary_expression -> postfix_expression .)
    <               reduce using rule 23 (unary_expression -> postfix_expression .)
    >               reduce using rule 23 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 23 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 23 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 23 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 23 (unary_expression -> postfix_expression .)
    &               reduce using rule 23 (unary_expression -> postfix_expression .)
    ^               reduce using rule 23 (unary_expression -> postfix_expression .)
    |               reduce using rule 23 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 23 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 23 (unary_expression -> postfix_expression .)
    )               reduce using rule 23 (unary_expression -> postfix_expression .)
    ,               reduce using rule 23 (unary_expression -> postfix_expression .)
    ]               reduce using rule 23 (unary_expression -> postfix_expression .)
    ;               reduce using rule 23 (unary_expression -> postfix_expression .)
    error           reduce using rule 23 (unary_expression -> postfix_expression .)
    }               reduce using rule 23 (unary_expression -> postfix_expression .)
    :               reduce using rule 23 (unary_expression -> postfix_expression .)
    [               shift and go to state 119
    (               shift and go to state 118
    .               shift and go to state 115
    PTR_OP          shift and go to state 117
    INC_OP          shift and go to state 116
    DEC_OP          shift and go to state 114


state 64

    (40) additive_expression -> multiplicative_expression .
    (37) multiplicative_expression -> multiplicative_expression . * cast_expression
    (38) multiplicative_expression -> multiplicative_expression . / cast_expression
    (39) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 40 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 40 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 40 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 40 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 40 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 40 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 40 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 40 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    error           reduce using rule 40 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 40 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 120
    /               shift and go to state 122
    %               shift and go to state 121


state 65

    (64) conditional_expression -> logical_or_expression .
    (63) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 64 (conditional_expression -> logical_or_expression .)
    error           reduce using rule 64 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 64 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 64 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 64 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 64 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 64 (conditional_expression -> logical_or_expression .)
    OR_OP           shift and go to state 123


state 66

    (26) unary_expression -> unary_operator . cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    cast_expression                shift and go to state 124
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 67

    (78) constant_expression -> conditional_expression .

    ]               reduce using rule 78 (constant_expression -> conditional_expression .)
    :               reduce using rule 78 (constant_expression -> conditional_expression .)


state 68

    (10) primary_expression -> identifier .

    [               reduce using rule 10 (primary_expression -> identifier .)
    (               reduce using rule 10 (primary_expression -> identifier .)
    .               reduce using rule 10 (primary_expression -> identifier .)
    PTR_OP          reduce using rule 10 (primary_expression -> identifier .)
    INC_OP          reduce using rule 10 (primary_expression -> identifier .)
    DEC_OP          reduce using rule 10 (primary_expression -> identifier .)
    *               reduce using rule 10 (primary_expression -> identifier .)
    /               reduce using rule 10 (primary_expression -> identifier .)
    %               reduce using rule 10 (primary_expression -> identifier .)
    +               reduce using rule 10 (primary_expression -> identifier .)
    -               reduce using rule 10 (primary_expression -> identifier .)
    LEFT_OP         reduce using rule 10 (primary_expression -> identifier .)
    RIGHT_OP        reduce using rule 10 (primary_expression -> identifier .)
    <               reduce using rule 10 (primary_expression -> identifier .)
    >               reduce using rule 10 (primary_expression -> identifier .)
    LE_OP           reduce using rule 10 (primary_expression -> identifier .)
    GE_OP           reduce using rule 10 (primary_expression -> identifier .)
    EQ_OP           reduce using rule 10 (primary_expression -> identifier .)
    NE_OP           reduce using rule 10 (primary_expression -> identifier .)
    &               reduce using rule 10 (primary_expression -> identifier .)
    ^               reduce using rule 10 (primary_expression -> identifier .)
    |               reduce using rule 10 (primary_expression -> identifier .)
    AND_OP          reduce using rule 10 (primary_expression -> identifier .)
    OR_OP           reduce using rule 10 (primary_expression -> identifier .)
    ]               reduce using rule 10 (primary_expression -> identifier .)
    )               reduce using rule 10 (primary_expression -> identifier .)
    ,               reduce using rule 10 (primary_expression -> identifier .)
    ;               reduce using rule 10 (primary_expression -> identifier .)
    error           reduce using rule 10 (primary_expression -> identifier .)
    }               reduce using rule 10 (primary_expression -> identifier .)
    :               reduce using rule 10 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 10 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 10 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 10 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 10 (primary_expression -> identifier .)
    SUB_ASSIGN      reduce using rule 10 (primary_expression -> identifier .)
    LEFT_ASSIGN     reduce using rule 10 (primary_expression -> identifier .)
    RIGHT_ASSIGN    reduce using rule 10 (primary_expression -> identifier .)
    =               reduce using rule 10 (primary_expression -> identifier .)


state 69

    (24) unary_expression -> INC_OP . unary_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 88
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 70

    (85) init_declarator_list -> init_declarator_list , . init_declarator
    (86) init_declarator -> . declarator equal_to initializer
    (87) init_declarator -> . declarator
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    identifier                     shift and go to state 18
    direct_declarator              shift and go to state 11
    init_declarator                shift and go to state 126
    declarator                     shift and go to state 80
    pointer                        shift and go to state 5

state 71

    (82) declaration -> declaration_specifiers init_declarator_list error .

    VOID            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    CHAR            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    INT             reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    FLOAT           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    TYPE_NAME       reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    CASE            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    DEFAULT         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    {               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    ;               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    IF              reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    SWITCH          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    WHILE           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    DO              reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    FOR             reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    CONTINUE        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    BREAK           reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    RETURN          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    INC_OP          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    DEC_OP          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    SIZEOF          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    &               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    *               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    +               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    -               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    !               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    (               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    IDENTIFIER      reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    INTEGER         reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    DECIMALFLOAT    reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    FLOATVAL        reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    CHARACTER       reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    ESCAPECHAR      reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    STRING          reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    }               reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)
    $end            reduce using rule 82 (declaration -> declaration_specifiers init_declarator_list error .)


state 72

    (81) declaration -> declaration_specifiers init_declarator_list ; .

    VOID            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    TYPE_NAME       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_OP          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC_OP          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    INTEGER         reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    DECIMALFLOAT    reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOATVAL        reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHARACTER       reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    ESCAPECHAR      reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING          reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 81 (declaration -> declaration_specifiers init_declarator_list ; .)


state 73

    (86) init_declarator -> declarator equal_to . initializer
    (120) initializer -> . assignment_expression
    (121) initializer -> . { initializer_list }
    (122) initializer -> . { initializer_list , }
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 129
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    initializer                    shift and go to state 127
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 128
    multiplicative_expression      shift and go to state 64
    conditional_expression         shift and go to state 101
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    identifier                     shift and go to state 68

state 74

    (173) function_definition -> declaration_specifiers declarator function_scope . get_labels compound_statement release_labels unset_function_scope
    (147) get_labels -> .

    {               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 130

state 75

    (172) function_definition -> declaration_specifiers declarator declaration_list . function_scope get_labels compound_statement release_labels unset_function_scope
    (141) declaration_list -> declaration_list . declaration
    (170) function_scope -> .
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (83) declaration_specifiers -> . type_specifier
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME

    {               reduce using rule 170 (function_scope -> .)
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1

    declaration                    shift and go to state 78
    type_specifier                 shift and go to state 7
    function_scope                 shift and go to state 131
    declaration_specifiers         shift and go to state 32

state 76

    (67) equal_to -> = .

    {               reduce using rule 67 (equal_to -> = .)
    INC_OP          reduce using rule 67 (equal_to -> = .)
    DEC_OP          reduce using rule 67 (equal_to -> = .)
    SIZEOF          reduce using rule 67 (equal_to -> = .)
    &               reduce using rule 67 (equal_to -> = .)
    *               reduce using rule 67 (equal_to -> = .)
    +               reduce using rule 67 (equal_to -> = .)
    -               reduce using rule 67 (equal_to -> = .)
    !               reduce using rule 67 (equal_to -> = .)
    (               reduce using rule 67 (equal_to -> = .)
    IDENTIFIER      reduce using rule 67 (equal_to -> = .)
    INTEGER         reduce using rule 67 (equal_to -> = .)
    DECIMALFLOAT    reduce using rule 67 (equal_to -> = .)
    FLOATVAL        reduce using rule 67 (equal_to -> = .)
    CHARACTER       reduce using rule 67 (equal_to -> = .)
    ESCAPECHAR      reduce using rule 67 (equal_to -> = .)
    STRING          reduce using rule 67 (equal_to -> = .)


state 77

    (175) function_definition -> declarator function_scope get_labels . compound_statement release_labels unset_function_scope
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }

    {               shift and go to state 133

    compound_statement             shift and go to state 132

state 78

    (141) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 141 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 141 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 141 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 141 (declaration_list -> declaration_list declaration .)
    TYPE_NAME       reduce using rule 141 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 141 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 141 (declaration_list -> declaration_list declaration .)
    ;               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 141 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 141 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 141 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 141 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 141 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 141 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 141 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 141 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 141 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 141 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 141 (declaration_list -> declaration_list declaration .)
    &               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    *               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    +               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    !               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 141 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 141 (declaration_list -> declaration_list declaration .)
    INTEGER         reduce using rule 141 (declaration_list -> declaration_list declaration .)
    DECIMALFLOAT    reduce using rule 141 (declaration_list -> declaration_list declaration .)
    FLOATVAL        reduce using rule 141 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 141 (declaration_list -> declaration_list declaration .)
    ESCAPECHAR      reduce using rule 141 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 141 (declaration_list -> declaration_list declaration .)
    }               reduce using rule 141 (declaration_list -> declaration_list declaration .)


state 79

    (174) function_definition -> declarator declaration_list function_scope . get_labels compound_statement release_labels unset_function_scope
    (147) get_labels -> .

    {               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 134

state 80

    (86) init_declarator -> declarator . equal_to initializer
    (87) init_declarator -> declarator .
    (67) equal_to -> . =

    ;               reduce using rule 87 (init_declarator -> declarator .)
    error           reduce using rule 87 (init_declarator -> declarator .)
    ,               reduce using rule 87 (init_declarator -> declarator .)
    =               shift and go to state 76

    equal_to                       shift and go to state 73

state 81

    (111) identifier_list -> identifier .

    ,               reduce using rule 111 (identifier_list -> identifier .)
    )               reduce using rule 111 (identifier_list -> identifier .)


state 82

    (105) parameter_type_list -> parameter_list .
    (107) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 105 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 135


state 83

    (101) direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list . unset_parameter_flag )
    (97) unset_parameter_flag -> .

    )               reduce using rule 97 (unset_parameter_flag -> .)

    unset_parameter_flag           shift and go to state 136

state 84

    (108) parameter_declaration -> declaration_specifiers . declarator
    (109) parameter_declaration -> declaration_specifiers . abstract_declarator
    (110) parameter_declaration -> declaration_specifiers .
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (115) abstract_declarator -> . pointer
    (116) abstract_declarator -> . direct_abstract_declarator
    (117) abstract_declarator -> . pointer direct_abstract_declarator
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (118) direct_abstract_declarator -> . [ ]
    (119) direct_abstract_declarator -> . [ constant_expression ]
    (3) identifier -> . IDENTIFIER

    ,               reduce using rule 110 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 110 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 8
    [               shift and go to state 140
    IDENTIFIER      shift and go to state 10

    direct_declarator              shift and go to state 11
    abstract_declarator            shift and go to state 137
    declarator                     shift and go to state 138
    direct_abstract_declarator     shift and go to state 139
    identifier                     shift and go to state 18
    pointer                        shift and go to state 141

state 85

    (106) parameter_list -> parameter_declaration .

    ,               reduce using rule 106 (parameter_list -> parameter_declaration .)
    )               reduce using rule 106 (parameter_list -> parameter_declaration .)


state 86

    (102) direct_declarator -> direct_declarator ( set_parameter_flag identifier_list . unset_parameter_flag )
    (112) identifier_list -> identifier_list . , identifier
    (97) unset_parameter_flag -> .

    ,               shift and go to state 143
    )               reduce using rule 97 (unset_parameter_flag -> .)

    unset_parameter_flag           shift and go to state 142

state 87

    (25) unary_expression -> DEC_OP unary_expression .

    MUL_ASSIGN      reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    =               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    *               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    %               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    &               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    ^               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    |               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    error           reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    }               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)
    :               reduce using rule 25 (unary_expression -> DEC_OP unary_expression .)


state 88

    (12) primary_expression -> ( . expression )
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 99

state 89

    (57) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    and_expression                 shift and go to state 144
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    equality_expression            shift and go to state 61
    primary_expression             shift and go to state 56
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 60
    additive_expression            shift and go to state 55
    relational_expression          shift and go to state 50

state 90

    (27) unary_expression -> SIZEOF unary_expression .

    MUL_ASSIGN      reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    =               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    *               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    error           reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 27 (unary_expression -> SIZEOF unary_expression .)


state 91

    (28) unary_expression -> SIZEOF ( . type_name )
    (12) primary_expression -> ( . expression )
    (113) type_name -> . specifier_qualifier_list
    (114) type_name -> . specifier_qualifier_list abstract_declarator
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (93) specifier_qualifier_list -> . type_specifier
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    type_specifier                 shift and go to state 95
    inclusive_or_expression        shift and go to state 45
    type_name                      shift and go to state 145
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    specifier_qualifier_list       shift and go to state 100
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 99

state 92

    (55) and_expression -> and_expression & . equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    equality_expression            shift and go to state 146
    primary_expression             shift and go to state 56
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 60
    additive_expression            shift and go to state 55
    relational_expression          shift and go to state 50

state 93

    (59) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    exclusive_or_expression        shift and go to state 147
    postfix_expression             shift and go to state 63
    additive_expression            shift and go to state 55
    and_expression                 shift and go to state 42
    primary_expression             shift and go to state 56
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    relational_expression          shift and go to state 50

state 94

    (66) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (34) cast_expression -> unary_expression .
    (68) assignment_operator -> . equal_to
    (69) assignment_operator -> . MUL_ASSIGN
    (70) assignment_operator -> . DIV_ASSIGN
    (71) assignment_operator -> . MOD_ASSIGN
    (72) assignment_operator -> . ADD_ASSIGN
    (73) assignment_operator -> . SUB_ASSIGN
    (74) assignment_operator -> . LEFT_ASSIGN
    (75) assignment_operator -> . RIGHT_ASSIGN
    (67) equal_to -> . =

    *               reduce using rule 34 (cast_expression -> unary_expression .)
    /               reduce using rule 34 (cast_expression -> unary_expression .)
    %               reduce using rule 34 (cast_expression -> unary_expression .)
    +               reduce using rule 34 (cast_expression -> unary_expression .)
    -               reduce using rule 34 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 34 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 34 (cast_expression -> unary_expression .)
    <               reduce using rule 34 (cast_expression -> unary_expression .)
    >               reduce using rule 34 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    &               reduce using rule 34 (cast_expression -> unary_expression .)
    ^               reduce using rule 34 (cast_expression -> unary_expression .)
    |               reduce using rule 34 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 34 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 34 (cast_expression -> unary_expression .)
    ;               reduce using rule 34 (cast_expression -> unary_expression .)
    ,               reduce using rule 34 (cast_expression -> unary_expression .)
    )               reduce using rule 34 (cast_expression -> unary_expression .)
    error           reduce using rule 34 (cast_expression -> unary_expression .)
    }               reduce using rule 34 (cast_expression -> unary_expression .)
    ]               reduce using rule 34 (cast_expression -> unary_expression .)
    MUL_ASSIGN      shift and go to state 151
    DIV_ASSIGN      shift and go to state 152
    MOD_ASSIGN      shift and go to state 149
    ADD_ASSIGN      shift and go to state 154
    SUB_ASSIGN      shift and go to state 148
    LEFT_ASSIGN     shift and go to state 153
    RIGHT_ASSIGN    shift and go to state 155
    =               shift and go to state 76

    equal_to                       shift and go to state 150
    assignment_operator            shift and go to state 156

state 95

    (93) specifier_qualifier_list -> type_specifier .

    *               reduce using rule 93 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 93 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 93 (specifier_qualifier_list -> type_specifier .)


state 96

    (12) primary_expression -> ( . expression )
    (35) cast_expression -> ( . type_name ) cast_expression
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (113) type_name -> . specifier_qualifier_list
    (114) type_name -> . specifier_qualifier_list abstract_declarator
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (93) specifier_qualifier_list -> . type_specifier
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    type_specifier                 shift and go to state 95
    inclusive_or_expression        shift and go to state 45
    type_name                      shift and go to state 97
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    specifier_qualifier_list       shift and go to state 100
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 99

state 97

    (35) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 157


state 98

    (76) expression -> assignment_expression .

    )               reduce using rule 76 (expression -> assignment_expression .)
    ,               reduce using rule 76 (expression -> assignment_expression .)
    ;               reduce using rule 76 (expression -> assignment_expression .)
    error           reduce using rule 76 (expression -> assignment_expression .)
    ]               reduce using rule 76 (expression -> assignment_expression .)


state 99

    (12) primary_expression -> ( expression . )
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 158
    ,               shift and go to state 159


state 100

    (113) type_name -> specifier_qualifier_list .
    (114) type_name -> specifier_qualifier_list . abstract_declarator
    (115) abstract_declarator -> . pointer
    (116) abstract_declarator -> . direct_abstract_declarator
    (117) abstract_declarator -> . pointer direct_abstract_declarator
    (104) pointer -> . *
    (118) direct_abstract_declarator -> . [ ]
    (119) direct_abstract_declarator -> . [ constant_expression ]

    )               reduce using rule 113 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 8
    [               shift and go to state 140

    direct_abstract_declarator     shift and go to state 139
    pointer                        shift and go to state 161
    abstract_declarator            shift and go to state 160

state 101

    (65) assignment_expression -> conditional_expression .

    ,               reduce using rule 65 (assignment_expression -> conditional_expression .)
    )               reduce using rule 65 (assignment_expression -> conditional_expression .)
    ;               reduce using rule 65 (assignment_expression -> conditional_expression .)
    error           reduce using rule 65 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 65 (assignment_expression -> conditional_expression .)
    }               reduce using rule 65 (assignment_expression -> conditional_expression .)


state 102

    (49) relational_expression -> relational_expression LE_OP . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 162
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56

state 103

    (47) relational_expression -> relational_expression < . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 163
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56

state 104

    (50) relational_expression -> relational_expression GE_OP . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 164
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56

state 105

    (48) relational_expression -> relational_expression > . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 165
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56

state 106

    (99) direct_declarator -> direct_declarator [ constant_expression ] .

    [               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    (               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    VOID            reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    CHAR            reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    INT             reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    FLOAT           reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    TYPE_NAME       reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    {               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ,               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    )               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    =               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ;               reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)
    error           reduce using rule 99 (direct_declarator -> direct_declarator [ constant_expression ] .)


state 107

    (41) additive_expression -> additive_expression + . multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 166
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    primary_expression             shift and go to state 56

state 108

    (42) additive_expression -> additive_expression - . multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 167
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    primary_expression             shift and go to state 56

state 109

    (61) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    inclusive_or_expression        shift and go to state 168
    exclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 63
    additive_expression            shift and go to state 55
    and_expression                 shift and go to state 42
    primary_expression             shift and go to state 56
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    relational_expression          shift and go to state 50

state 110

    (44) shift_expression -> shift_expression LEFT_OP . additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    additive_expression            shift and go to state 169
    primary_expression             shift and go to state 56

state 111

    (45) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    additive_expression            shift and go to state 170
    primary_expression             shift and go to state 56

state 112

    (53) equality_expression -> equality_expression NE_OP . relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 171
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 60
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56

state 113

    (52) equality_expression -> equality_expression EQ_OP . relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 172
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    identifier                     shift and go to state 68
    shift_expression               shift and go to state 60
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56

state 114

    (20) postfix_expression -> postfix_expression DEC_OP .

    [               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    (               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    .               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    =               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    *               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    /               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    %               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    +               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    -               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    <               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    >               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    &               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    ^               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    |               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    )               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    ,               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    ;               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    error           reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    ]               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    }               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)
    :               reduce using rule 20 (postfix_expression -> postfix_expression DEC_OP .)


state 115

    (17) postfix_expression -> postfix_expression . . identifier
    (3) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    identifier                     shift and go to state 173

state 116

    (19) postfix_expression -> postfix_expression INC_OP .

    [               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    (               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    .               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    =               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    *               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    /               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    %               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    +               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    -               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    <               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    >               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    &               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    ^               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    |               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    )               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    ,               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    ;               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    error           reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    ]               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    }               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)
    :               reduce using rule 19 (postfix_expression -> postfix_expression INC_OP .)


state 117

    (18) postfix_expression -> postfix_expression PTR_OP . identifier
    (3) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    identifier                     shift and go to state 174

state 118

    (15) postfix_expression -> postfix_expression ( . )
    (16) postfix_expression -> postfix_expression ( . argument_expression_list )
    (21) argument_expression_list -> . assignment_expression
    (22) argument_expression_list -> . argument_expression_list , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 175
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 176
    multiplicative_expression      shift and go to state 64
    argument_expression_list       shift and go to state 177
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68

state 119

    (14) postfix_expression -> postfix_expression [ . expression ]
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 178

state 120

    (37) multiplicative_expression -> multiplicative_expression * . cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    cast_expression                shift and go to state 179
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 121

    (39) multiplicative_expression -> multiplicative_expression % . cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    cast_expression                shift and go to state 180
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 122

    (38) multiplicative_expression -> multiplicative_expression / . cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    cast_expression                shift and go to state 181
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 123

    (63) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    multiplicative_expression      shift and go to state 64
    inclusive_or_expression        shift and go to state 45
    exclusive_or_expression        shift and go to state 38
    postfix_expression             shift and go to state 63
    shift_expression               shift and go to state 60
    additive_expression            shift and go to state 55
    and_expression                 shift and go to state 42
    primary_expression             shift and go to state 56
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_and_expression         shift and go to state 182
    identifier                     shift and go to state 68
    equality_expression            shift and go to state 61
    relational_expression          shift and go to state 50

state 124

    (26) unary_expression -> unary_operator cast_expression .

    MUL_ASSIGN      reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    =               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    error           reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 26 (unary_expression -> unary_operator cast_expression .)


state 125

    (24) unary_expression -> INC_OP unary_expression .

    MUL_ASSIGN      reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    =               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    *               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    %               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    &               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    ^               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    |               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    error           reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    }               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)
    :               reduce using rule 24 (unary_expression -> INC_OP unary_expression .)


state 126

    (85) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 85 (init_declarator_list -> init_declarator_list , init_declarator .)
    error           reduce using rule 85 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 85 (init_declarator_list -> init_declarator_list , init_declarator .)


state 127

    (86) init_declarator -> declarator equal_to initializer .

    ;               reduce using rule 86 (init_declarator -> declarator equal_to initializer .)
    error           reduce using rule 86 (init_declarator -> declarator equal_to initializer .)
    ,               reduce using rule 86 (init_declarator -> declarator equal_to initializer .)


state 128

    (120) initializer -> assignment_expression .

    }               reduce using rule 120 (initializer -> assignment_expression .)
    ,               reduce using rule 120 (initializer -> assignment_expression .)
    ;               reduce using rule 120 (initializer -> assignment_expression .)
    error           reduce using rule 120 (initializer -> assignment_expression .)


state 129

    (121) initializer -> { . initializer_list }
    (122) initializer -> { . initializer_list , }
    (123) initializer_list -> . initializer
    (124) initializer_list -> . initializer_list , initializer
    (120) initializer -> . assignment_expression
    (121) initializer -> . { initializer_list }
    (122) initializer -> . { initializer_list , }
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 129
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    initializer                    shift and go to state 183
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 128
    multiplicative_expression      shift and go to state 64
    conditional_expression         shift and go to state 101
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    initializer_list               shift and go to state 184
    identifier                     shift and go to state 68

state 130

    (173) function_definition -> declaration_specifiers declarator function_scope get_labels . compound_statement release_labels unset_function_scope
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }

    {               shift and go to state 133

    compound_statement             shift and go to state 185

state 131

    (172) function_definition -> declaration_specifiers declarator declaration_list function_scope . get_labels compound_statement release_labels unset_function_scope
    (147) get_labels -> .

    {               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 186

state 132

    (175) function_definition -> declarator function_scope get_labels compound_statement . release_labels unset_function_scope
    (148) release_labels -> .

    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    $end            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 187

state 133

    (133) compound_statement -> { . }
    (134) compound_statement -> { . new_scope compound_statement_list finish_scope }
    (135) compound_statement -> { . new_scope compound_declaration_list finish_scope }
    (1) new_scope -> .

    }               shift and go to state 189
    CASE            reduce using rule 1 (new_scope -> .)
    DEFAULT         reduce using rule 1 (new_scope -> .)
    {               reduce using rule 1 (new_scope -> .)
    ;               reduce using rule 1 (new_scope -> .)
    IF              reduce using rule 1 (new_scope -> .)
    SWITCH          reduce using rule 1 (new_scope -> .)
    WHILE           reduce using rule 1 (new_scope -> .)
    DO              reduce using rule 1 (new_scope -> .)
    FOR             reduce using rule 1 (new_scope -> .)
    CONTINUE        reduce using rule 1 (new_scope -> .)
    BREAK           reduce using rule 1 (new_scope -> .)
    RETURN          reduce using rule 1 (new_scope -> .)
    VOID            reduce using rule 1 (new_scope -> .)
    CHAR            reduce using rule 1 (new_scope -> .)
    INT             reduce using rule 1 (new_scope -> .)
    FLOAT           reduce using rule 1 (new_scope -> .)
    TYPE_NAME       reduce using rule 1 (new_scope -> .)
    INC_OP          reduce using rule 1 (new_scope -> .)
    DEC_OP          reduce using rule 1 (new_scope -> .)
    SIZEOF          reduce using rule 1 (new_scope -> .)
    &               reduce using rule 1 (new_scope -> .)
    *               reduce using rule 1 (new_scope -> .)
    +               reduce using rule 1 (new_scope -> .)
    -               reduce using rule 1 (new_scope -> .)
    !               reduce using rule 1 (new_scope -> .)
    (               reduce using rule 1 (new_scope -> .)
    IDENTIFIER      reduce using rule 1 (new_scope -> .)
    INTEGER         reduce using rule 1 (new_scope -> .)
    DECIMALFLOAT    reduce using rule 1 (new_scope -> .)
    FLOATVAL        reduce using rule 1 (new_scope -> .)
    CHARACTER       reduce using rule 1 (new_scope -> .)
    ESCAPECHAR      reduce using rule 1 (new_scope -> .)
    STRING          reduce using rule 1 (new_scope -> .)

    new_scope                      shift and go to state 188

state 134

    (174) function_definition -> declarator declaration_list function_scope get_labels . compound_statement release_labels unset_function_scope
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }

    {               shift and go to state 133

    compound_statement             shift and go to state 190

state 135

    (107) parameter_list -> parameter_list , . parameter_declaration
    (108) parameter_declaration -> . declaration_specifiers declarator
    (109) parameter_declaration -> . declaration_specifiers abstract_declarator
    (110) parameter_declaration -> . declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME

    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1

    type_specifier                 shift and go to state 7
    parameter_declaration          shift and go to state 191
    declaration_specifiers         shift and go to state 84

state 136

    (101) direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag . )

    )               shift and go to state 192


state 137

    (109) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 109 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 109 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 138

    (108) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 108 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 108 (parameter_declaration -> declaration_specifiers declarator .)


state 139

    (116) abstract_declarator -> direct_abstract_declarator .

    ,               reduce using rule 116 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 116 (abstract_declarator -> direct_abstract_declarator .)


state 140

    (118) direct_abstract_declarator -> [ . ]
    (119) direct_abstract_declarator -> [ . constant_expression ]
    (78) constant_expression -> . conditional_expression
    (64) conditional_expression -> . logical_or_expression
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    ]               shift and go to state 194
    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    relational_expression          shift and go to state 50
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    constant_expression            shift and go to state 193
    conditional_expression         shift and go to state 67
    identifier                     shift and go to state 68

state 141

    (94) declarator -> pointer . declarator
    (115) abstract_declarator -> pointer .
    (117) abstract_declarator -> pointer . direct_abstract_declarator
    (94) declarator -> . pointer declarator
    (95) declarator -> . direct_declarator
    (118) direct_abstract_declarator -> . [ ]
    (119) direct_abstract_declarator -> . [ constant_expression ]
    (104) pointer -> . *
    (98) direct_declarator -> . identifier
    (99) direct_declarator -> . direct_declarator [ constant_expression ]
    (100) direct_declarator -> . direct_declarator [ ]
    (101) direct_declarator -> . direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag )
    (102) direct_declarator -> . direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag )
    (103) direct_declarator -> . direct_declarator ( )
    (3) identifier -> . IDENTIFIER

    ,               reduce using rule 115 (abstract_declarator -> pointer .)
    )               reduce using rule 115 (abstract_declarator -> pointer .)
    [               shift and go to state 140
    *               shift and go to state 8
    IDENTIFIER      shift and go to state 10

    direct_declarator              shift and go to state 11
    declarator                     shift and go to state 19
    direct_abstract_declarator     shift and go to state 195
    identifier                     shift and go to state 18
    pointer                        shift and go to state 5

state 142

    (102) direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag . )

    )               shift and go to state 196


state 143

    (112) identifier_list -> identifier_list , . identifier
    (3) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 10

    identifier                     shift and go to state 197

state 144

    (57) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (55) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    error           reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 57 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 92


state 145

    (28) unary_expression -> SIZEOF ( type_name . )

    )               shift and go to state 198


state 146

    (55) and_expression -> and_expression & equality_expression .
    (52) equality_expression -> equality_expression . EQ_OP relational_expression
    (53) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    error           reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 55 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 113
    NE_OP           shift and go to state 112


state 147

    (59) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (57) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    error           reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 59 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 89


state 148

    (73) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    &               reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    *               reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    +               reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    INTEGER         reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    DECIMALFLOAT    reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    FLOATVAL        reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    CHARACTER       reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    ESCAPECHAR      reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)
    STRING          reduce using rule 73 (assignment_operator -> SUB_ASSIGN .)


state 149

    (71) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    &               reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    *               reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    +               reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    INTEGER         reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    DECIMALFLOAT    reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    FLOATVAL        reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    CHARACTER       reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    ESCAPECHAR      reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)
    STRING          reduce using rule 71 (assignment_operator -> MOD_ASSIGN .)


state 150

    (68) assignment_operator -> equal_to .

    INC_OP          reduce using rule 68 (assignment_operator -> equal_to .)
    DEC_OP          reduce using rule 68 (assignment_operator -> equal_to .)
    SIZEOF          reduce using rule 68 (assignment_operator -> equal_to .)
    &               reduce using rule 68 (assignment_operator -> equal_to .)
    *               reduce using rule 68 (assignment_operator -> equal_to .)
    +               reduce using rule 68 (assignment_operator -> equal_to .)
    -               reduce using rule 68 (assignment_operator -> equal_to .)
    !               reduce using rule 68 (assignment_operator -> equal_to .)
    (               reduce using rule 68 (assignment_operator -> equal_to .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> equal_to .)
    INTEGER         reduce using rule 68 (assignment_operator -> equal_to .)
    DECIMALFLOAT    reduce using rule 68 (assignment_operator -> equal_to .)
    FLOATVAL        reduce using rule 68 (assignment_operator -> equal_to .)
    CHARACTER       reduce using rule 68 (assignment_operator -> equal_to .)
    ESCAPECHAR      reduce using rule 68 (assignment_operator -> equal_to .)
    STRING          reduce using rule 68 (assignment_operator -> equal_to .)


state 151

    (69) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    &               reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    *               reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    +               reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    INTEGER         reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    DECIMALFLOAT    reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    FLOATVAL        reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    CHARACTER       reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    ESCAPECHAR      reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)
    STRING          reduce using rule 69 (assignment_operator -> MUL_ASSIGN .)


state 152

    (70) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    &               reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    *               reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    +               reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    INTEGER         reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    DECIMALFLOAT    reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    FLOATVAL        reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    CHARACTER       reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    ESCAPECHAR      reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)
    STRING          reduce using rule 70 (assignment_operator -> DIV_ASSIGN .)


state 153

    (74) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    &               reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    *               reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    +               reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    INTEGER         reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    DECIMALFLOAT    reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    FLOATVAL        reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    CHARACTER       reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    ESCAPECHAR      reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)
    STRING          reduce using rule 74 (assignment_operator -> LEFT_ASSIGN .)


state 154

    (72) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    &               reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    *               reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    +               reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    INTEGER         reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    DECIMALFLOAT    reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    FLOATVAL        reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    CHARACTER       reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    ESCAPECHAR      reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)
    STRING          reduce using rule 72 (assignment_operator -> ADD_ASSIGN .)


state 155

    (75) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    &               reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    *               reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    +               reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    INTEGER         reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    DECIMALFLOAT    reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    FLOATVAL        reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    ESCAPECHAR      reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)
    STRING          reduce using rule 75 (assignment_operator -> RIGHT_ASSIGN .)


state 156

    (66) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 199
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68

state 157

    (35) cast_expression -> ( type_name ) . cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 63
    primary_expression             shift and go to state 56
    cast_expression                shift and go to state 200
    identifier                     shift and go to state 68
    unary_operator                 shift and go to state 66

state 158

    (12) primary_expression -> ( expression ) .

    [               reduce using rule 12 (primary_expression -> ( expression ) .)
    (               reduce using rule 12 (primary_expression -> ( expression ) .)
    .               reduce using rule 12 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 12 (primary_expression -> ( expression ) .)
    INC_OP          reduce using rule 12 (primary_expression -> ( expression ) .)
    DEC_OP          reduce using rule 12 (primary_expression -> ( expression ) .)
    *               reduce using rule 12 (primary_expression -> ( expression ) .)
    /               reduce using rule 12 (primary_expression -> ( expression ) .)
    %               reduce using rule 12 (primary_expression -> ( expression ) .)
    +               reduce using rule 12 (primary_expression -> ( expression ) .)
    -               reduce using rule 12 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 12 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 12 (primary_expression -> ( expression ) .)
    <               reduce using rule 12 (primary_expression -> ( expression ) .)
    >               reduce using rule 12 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 12 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 12 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 12 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 12 (primary_expression -> ( expression ) .)
    &               reduce using rule 12 (primary_expression -> ( expression ) .)
    ^               reduce using rule 12 (primary_expression -> ( expression ) .)
    |               reduce using rule 12 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 12 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 12 (primary_expression -> ( expression ) .)
    ]               reduce using rule 12 (primary_expression -> ( expression ) .)
    )               reduce using rule 12 (primary_expression -> ( expression ) .)
    ,               reduce using rule 12 (primary_expression -> ( expression ) .)
    ;               reduce using rule 12 (primary_expression -> ( expression ) .)
    error           reduce using rule 12 (primary_expression -> ( expression ) .)
    }               reduce using rule 12 (primary_expression -> ( expression ) .)
    :               reduce using rule 12 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 12 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 12 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 12 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 12 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 12 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 12 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 12 (primary_expression -> ( expression ) .)
    =               reduce using rule 12 (primary_expression -> ( expression ) .)


state 159

    (77) expression -> expression , . assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 201
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68

state 160

    (114) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 114 (type_name -> specifier_qualifier_list abstract_declarator .)


state 161

    (115) abstract_declarator -> pointer .
    (117) abstract_declarator -> pointer . direct_abstract_declarator
    (118) direct_abstract_declarator -> . [ ]
    (119) direct_abstract_declarator -> . [ constant_expression ]

    )               reduce using rule 115 (abstract_declarator -> pointer .)
    [               shift and go to state 140

    direct_abstract_declarator     shift and go to state 195

state 162

    (49) relational_expression -> relational_expression LE_OP shift_expression .
    (44) shift_expression -> shift_expression . LEFT_OP additive_expression
    (45) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    ;               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    error           reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    ]               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    }               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 49 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 110
    RIGHT_OP        shift and go to state 111


state 163

    (47) relational_expression -> relational_expression < shift_expression .
    (44) shift_expression -> shift_expression . LEFT_OP additive_expression
    (45) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    error           reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 47 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 110
    RIGHT_OP        shift and go to state 111


state 164

    (50) relational_expression -> relational_expression GE_OP shift_expression .
    (44) shift_expression -> shift_expression . LEFT_OP additive_expression
    (45) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    ;               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    error           reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    ]               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    }               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 50 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 110
    RIGHT_OP        shift and go to state 111


state 165

    (48) relational_expression -> relational_expression > shift_expression .
    (44) shift_expression -> shift_expression . LEFT_OP additive_expression
    (45) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    error           reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 48 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 110
    RIGHT_OP        shift and go to state 111


state 166

    (41) additive_expression -> additive_expression + multiplicative_expression .
    (37) multiplicative_expression -> multiplicative_expression . * cast_expression
    (38) multiplicative_expression -> multiplicative_expression . / cast_expression
    (39) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    error           reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 41 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 120
    /               shift and go to state 122
    %               shift and go to state 121


state 167

    (42) additive_expression -> additive_expression - multiplicative_expression .
    (37) multiplicative_expression -> multiplicative_expression . * cast_expression
    (38) multiplicative_expression -> multiplicative_expression . / cast_expression
    (39) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    error           reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 42 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 120
    /               shift and go to state 122
    %               shift and go to state 121


state 168

    (61) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (59) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    error           reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 61 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 93


state 169

    (44) shift_expression -> shift_expression LEFT_OP additive_expression .
    (41) additive_expression -> additive_expression . + multiplicative_expression
    (42) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ]               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ;               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    error           reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    }               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 44 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 107
    -               shift and go to state 108


state 170

    (45) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (41) additive_expression -> additive_expression . + multiplicative_expression
    (42) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ]               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ;               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    error           reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    }               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 45 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 107
    -               shift and go to state 108


state 171

    (53) equality_expression -> equality_expression NE_OP relational_expression .
    (47) relational_expression -> relational_expression . < shift_expression
    (48) relational_expression -> relational_expression . > shift_expression
    (49) relational_expression -> relational_expression . LE_OP shift_expression
    (50) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    ;               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    error           reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    ]               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    }               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 53 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 103
    >               shift and go to state 105
    LE_OP           shift and go to state 102
    GE_OP           shift and go to state 104


state 172

    (52) equality_expression -> equality_expression EQ_OP relational_expression .
    (47) relational_expression -> relational_expression . < shift_expression
    (48) relational_expression -> relational_expression . > shift_expression
    (49) relational_expression -> relational_expression . LE_OP shift_expression
    (50) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ;               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    error           reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ]               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    }               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 52 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 103
    >               shift and go to state 105
    LE_OP           shift and go to state 102
    GE_OP           shift and go to state 104


state 173

    (17) postfix_expression -> postfix_expression . identifier .

    [               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    (               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    .               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    PTR_OP          reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    INC_OP          reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    DEC_OP          reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    MUL_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    DIV_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    MOD_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    ADD_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    SUB_ASSIGN      reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    LEFT_ASSIGN     reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    RIGHT_ASSIGN    reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    =               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    *               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    /               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    %               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    +               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    -               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    LEFT_OP         reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    RIGHT_OP        reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    <               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    >               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    LE_OP           reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    GE_OP           reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    EQ_OP           reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    NE_OP           reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    &               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    ^               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    |               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    AND_OP          reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    OR_OP           reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    )               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    ,               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    ;               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    error           reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    ]               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    }               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)
    :               reduce using rule 17 (postfix_expression -> postfix_expression . identifier .)


state 174

    (18) postfix_expression -> postfix_expression PTR_OP identifier .

    [               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    (               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    .               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    PTR_OP          reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    INC_OP          reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    DEC_OP          reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    MUL_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    DIV_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    MOD_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ADD_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    SUB_ASSIGN      reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    LEFT_ASSIGN     reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    RIGHT_ASSIGN    reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    =               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    *               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    /               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    %               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    +               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    -               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    LEFT_OP         reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    RIGHT_OP        reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    <               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    >               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    LE_OP           reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    GE_OP           reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    EQ_OP           reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    NE_OP           reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    &               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ^               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    |               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    AND_OP          reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    OR_OP           reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    )               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ,               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ;               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    error           reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    ]               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    }               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)
    :               reduce using rule 18 (postfix_expression -> postfix_expression PTR_OP identifier .)


state 175

    (15) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    INC_OP          reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    DEC_OP          reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    MUL_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    DIV_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    MOD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    SUB_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    LEFT_ASSIGN     reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_ASSIGN    reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    LE_OP           reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    GE_OP           reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    NE_OP           reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    error           reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 15 (postfix_expression -> postfix_expression ( ) .)


state 176

    (21) argument_expression_list -> assignment_expression .

    )               reduce using rule 21 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 21 (argument_expression_list -> assignment_expression .)


state 177

    (16) postfix_expression -> postfix_expression ( argument_expression_list . )
    (22) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 202
    ,               shift and go to state 203


state 178

    (14) postfix_expression -> postfix_expression [ expression . ]
    (77) expression -> expression . , assignment_expression

    ]               shift and go to state 204
    ,               shift and go to state 159


state 179

    (37) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LEFT_OP         reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RIGHT_OP        reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    error           reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 37 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 180

    (39) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LEFT_OP         reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RIGHT_OP        reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE_OP           reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_OP           reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_OP           reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE_OP           reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    error           reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 39 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 181

    (38) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LEFT_OP         reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RIGHT_OP        reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE_OP           reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_OP           reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_OP           reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE_OP           reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    error           reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 38 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 182

    (63) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (61) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    OR_OP           reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    error           reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 63 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 109


state 183

    (123) initializer_list -> initializer .

    }               reduce using rule 123 (initializer_list -> initializer .)
    ,               reduce using rule 123 (initializer_list -> initializer .)


state 184

    (121) initializer -> { initializer_list . }
    (122) initializer -> { initializer_list . , }
    (124) initializer_list -> initializer_list . , initializer

    }               shift and go to state 205
    ,               shift and go to state 206


state 185

    (173) function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement . release_labels unset_function_scope
    (148) release_labels -> .

    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    $end            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 207

state 186

    (172) function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels . compound_statement release_labels unset_function_scope
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }

    {               shift and go to state 133

    compound_statement             shift and go to state 208

state 187

    (175) function_definition -> declarator function_scope get_labels compound_statement release_labels . unset_function_scope
    (171) unset_function_scope -> .

    VOID            reduce using rule 171 (unset_function_scope -> .)
    CHAR            reduce using rule 171 (unset_function_scope -> .)
    INT             reduce using rule 171 (unset_function_scope -> .)
    FLOAT           reduce using rule 171 (unset_function_scope -> .)
    TYPE_NAME       reduce using rule 171 (unset_function_scope -> .)
    *               reduce using rule 171 (unset_function_scope -> .)
    IDENTIFIER      reduce using rule 171 (unset_function_scope -> .)
    $end            reduce using rule 171 (unset_function_scope -> .)

    unset_function_scope           shift and go to state 209

state 188

    (134) compound_statement -> { new_scope . compound_statement_list finish_scope }
    (135) compound_statement -> { new_scope . compound_declaration_list finish_scope }
    (136) compound_statement_list -> . declaration_list
    (137) compound_statement_list -> . declaration_list compound_declaration_list
    (138) compound_declaration_list -> . statement_list
    (139) compound_declaration_list -> . statement_list compound_statement_list
    (140) declaration_list -> . declaration
    (141) declaration_list -> . declaration_list declaration
    (142) statement_list -> . statement
    (143) statement_list -> . statement_list statement
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (83) declaration_specifiers -> . type_specifier
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    declaration                    shift and go to state 29
    compound_declaration_list      shift and go to state 215
    iteration_statement            shift and go to state 211
    type_specifier                 shift and go to state 7
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    selection_statement            shift and go to state 231
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 226
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    declaration_specifiers         shift and go to state 32
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    declaration_list               shift and go to state 213
    conditional_expression         shift and go to state 101
    statement_list                 shift and go to state 220
    identifier                     shift and go to state 68
    expression                     shift and go to state 221
    compound_statement_list        shift and go to state 229

state 189

    (133) compound_statement -> { } .

    CASE            reduce using rule 133 (compound_statement -> { } .)
    DEFAULT         reduce using rule 133 (compound_statement -> { } .)
    {               reduce using rule 133 (compound_statement -> { } .)
    ;               reduce using rule 133 (compound_statement -> { } .)
    IF              reduce using rule 133 (compound_statement -> { } .)
    SWITCH          reduce using rule 133 (compound_statement -> { } .)
    WHILE           reduce using rule 133 (compound_statement -> { } .)
    DO              reduce using rule 133 (compound_statement -> { } .)
    FOR             reduce using rule 133 (compound_statement -> { } .)
    CONTINUE        reduce using rule 133 (compound_statement -> { } .)
    BREAK           reduce using rule 133 (compound_statement -> { } .)
    RETURN          reduce using rule 133 (compound_statement -> { } .)
    VOID            reduce using rule 133 (compound_statement -> { } .)
    CHAR            reduce using rule 133 (compound_statement -> { } .)
    INT             reduce using rule 133 (compound_statement -> { } .)
    FLOAT           reduce using rule 133 (compound_statement -> { } .)
    TYPE_NAME       reduce using rule 133 (compound_statement -> { } .)
    INC_OP          reduce using rule 133 (compound_statement -> { } .)
    DEC_OP          reduce using rule 133 (compound_statement -> { } .)
    SIZEOF          reduce using rule 133 (compound_statement -> { } .)
    &               reduce using rule 133 (compound_statement -> { } .)
    *               reduce using rule 133 (compound_statement -> { } .)
    +               reduce using rule 133 (compound_statement -> { } .)
    -               reduce using rule 133 (compound_statement -> { } .)
    !               reduce using rule 133 (compound_statement -> { } .)
    (               reduce using rule 133 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 133 (compound_statement -> { } .)
    INTEGER         reduce using rule 133 (compound_statement -> { } .)
    DECIMALFLOAT    reduce using rule 133 (compound_statement -> { } .)
    FLOATVAL        reduce using rule 133 (compound_statement -> { } .)
    CHARACTER       reduce using rule 133 (compound_statement -> { } .)
    ESCAPECHAR      reduce using rule 133 (compound_statement -> { } .)
    STRING          reduce using rule 133 (compound_statement -> { } .)
    }               reduce using rule 133 (compound_statement -> { } .)
    ELSE            reduce using rule 133 (compound_statement -> { } .)
    $end            reduce using rule 133 (compound_statement -> { } .)


state 190

    (174) function_definition -> declarator declaration_list function_scope get_labels compound_statement . release_labels unset_function_scope
    (148) release_labels -> .

    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    $end            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 233

state 191

    (107) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 107 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 107 (parameter_list -> parameter_list , parameter_declaration .)


state 192

    (101) direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .

    [               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    (               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    VOID            reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    CHAR            reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    INT             reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    FLOAT           reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    TYPE_NAME       reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    {               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    ,               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    )               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    =               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    ;               reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)
    error           reduce using rule 101 (direct_declarator -> direct_declarator ( set_parameter_flag parameter_type_list unset_parameter_flag ) .)


state 193

    (119) direct_abstract_declarator -> [ constant_expression . ]

    ]               shift and go to state 234


state 194

    (118) direct_abstract_declarator -> [ ] .

    ,               reduce using rule 118 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 118 (direct_abstract_declarator -> [ ] .)


state 195

    (117) abstract_declarator -> pointer direct_abstract_declarator .

    ,               reduce using rule 117 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 117 (abstract_declarator -> pointer direct_abstract_declarator .)


state 196

    (102) direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .

    [               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    (               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    VOID            reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    CHAR            reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    INT             reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    FLOAT           reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    TYPE_NAME       reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    {               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    ,               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    )               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    =               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    ;               reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)
    error           reduce using rule 102 (direct_declarator -> direct_declarator ( set_parameter_flag identifier_list unset_parameter_flag ) .)


state 197

    (112) identifier_list -> identifier_list , identifier .

    ,               reduce using rule 112 (identifier_list -> identifier_list , identifier .)
    )               reduce using rule 112 (identifier_list -> identifier_list , identifier .)


state 198

    (28) unary_expression -> SIZEOF ( type_name ) .

    MUL_ASSIGN      reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    DIV_ASSIGN      reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    MOD_ASSIGN      reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    ADD_ASSIGN      reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    SUB_ASSIGN      reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_ASSIGN     reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_ASSIGN    reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    =               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    *               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_OP         reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_OP        reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    LE_OP           reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    GE_OP           reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_OP           reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    NE_OP           reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    error           reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 28 (unary_expression -> SIZEOF ( type_name ) .)


state 199

    (66) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ,               reduce using rule 66 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 66 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ;               reduce using rule 66 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    error           reduce using rule 66 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 66 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 66 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 200

    (35) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_OP         reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_OP        reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    LE_OP           reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    GE_OP           reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    EQ_OP           reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    NE_OP           reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    error           reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    MUL_ASSIGN      reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    DIV_ASSIGN      reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    MOD_ASSIGN      reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    ADD_ASSIGN      reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    SUB_ASSIGN      reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_ASSIGN     reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_ASSIGN    reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 35 (cast_expression -> ( type_name ) cast_expression .)


state 201

    (77) expression -> expression , assignment_expression .

    )               reduce using rule 77 (expression -> expression , assignment_expression .)
    ,               reduce using rule 77 (expression -> expression , assignment_expression .)
    ;               reduce using rule 77 (expression -> expression , assignment_expression .)
    error           reduce using rule 77 (expression -> expression , assignment_expression .)
    ]               reduce using rule 77 (expression -> expression , assignment_expression .)


state 202

    (16) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_OP          reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DEC_OP          reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_ASSIGN     reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_ASSIGN    reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE_OP           reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_OP           reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE_OP           reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    error           reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 16 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 203

    (22) argument_expression_list -> argument_expression_list , . assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 235
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68

state 204

    (14) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    error           reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 14 (postfix_expression -> postfix_expression [ expression ] .)


state 205

    (121) initializer -> { initializer_list } .

    }               reduce using rule 121 (initializer -> { initializer_list } .)
    ,               reduce using rule 121 (initializer -> { initializer_list } .)
    ;               reduce using rule 121 (initializer -> { initializer_list } .)
    error           reduce using rule 121 (initializer -> { initializer_list } .)


state 206

    (122) initializer -> { initializer_list , . }
    (124) initializer_list -> initializer_list , . initializer
    (120) initializer -> . assignment_expression
    (121) initializer -> . { initializer_list }
    (122) initializer -> . { initializer_list , }
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 237
    {               shift and go to state 129
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    initializer                    shift and go to state 236
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 128
    multiplicative_expression      shift and go to state 64
    conditional_expression         shift and go to state 101
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    identifier                     shift and go to state 68

state 207

    (173) function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels . unset_function_scope
    (171) unset_function_scope -> .

    VOID            reduce using rule 171 (unset_function_scope -> .)
    CHAR            reduce using rule 171 (unset_function_scope -> .)
    INT             reduce using rule 171 (unset_function_scope -> .)
    FLOAT           reduce using rule 171 (unset_function_scope -> .)
    TYPE_NAME       reduce using rule 171 (unset_function_scope -> .)
    *               reduce using rule 171 (unset_function_scope -> .)
    IDENTIFIER      reduce using rule 171 (unset_function_scope -> .)
    $end            reduce using rule 171 (unset_function_scope -> .)

    unset_function_scope           shift and go to state 238

state 208

    (172) function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement . release_labels unset_function_scope
    (148) release_labels -> .

    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    $end            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 239

state 209

    (175) function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .

    VOID            reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    CHAR            reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    INT             reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    FLOAT           reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    TYPE_NAME       reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    *               reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    IDENTIFIER      reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    $end            reduce using rule 175 (function_definition -> declarator function_scope get_labels compound_statement release_labels unset_function_scope .)


state 210

    (127) statement -> expression_statement .

    CASE            reduce using rule 127 (statement -> expression_statement .)
    DEFAULT         reduce using rule 127 (statement -> expression_statement .)
    {               reduce using rule 127 (statement -> expression_statement .)
    ;               reduce using rule 127 (statement -> expression_statement .)
    IF              reduce using rule 127 (statement -> expression_statement .)
    SWITCH          reduce using rule 127 (statement -> expression_statement .)
    WHILE           reduce using rule 127 (statement -> expression_statement .)
    DO              reduce using rule 127 (statement -> expression_statement .)
    FOR             reduce using rule 127 (statement -> expression_statement .)
    CONTINUE        reduce using rule 127 (statement -> expression_statement .)
    BREAK           reduce using rule 127 (statement -> expression_statement .)
    RETURN          reduce using rule 127 (statement -> expression_statement .)
    VOID            reduce using rule 127 (statement -> expression_statement .)
    CHAR            reduce using rule 127 (statement -> expression_statement .)
    INT             reduce using rule 127 (statement -> expression_statement .)
    FLOAT           reduce using rule 127 (statement -> expression_statement .)
    TYPE_NAME       reduce using rule 127 (statement -> expression_statement .)
    INC_OP          reduce using rule 127 (statement -> expression_statement .)
    DEC_OP          reduce using rule 127 (statement -> expression_statement .)
    SIZEOF          reduce using rule 127 (statement -> expression_statement .)
    &               reduce using rule 127 (statement -> expression_statement .)
    *               reduce using rule 127 (statement -> expression_statement .)
    +               reduce using rule 127 (statement -> expression_statement .)
    -               reduce using rule 127 (statement -> expression_statement .)
    !               reduce using rule 127 (statement -> expression_statement .)
    (               reduce using rule 127 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 127 (statement -> expression_statement .)
    INTEGER         reduce using rule 127 (statement -> expression_statement .)
    DECIMALFLOAT    reduce using rule 127 (statement -> expression_statement .)
    FLOATVAL        reduce using rule 127 (statement -> expression_statement .)
    CHARACTER       reduce using rule 127 (statement -> expression_statement .)
    ESCAPECHAR      reduce using rule 127 (statement -> expression_statement .)
    STRING          reduce using rule 127 (statement -> expression_statement .)
    }               reduce using rule 127 (statement -> expression_statement .)
    ELSE            reduce using rule 127 (statement -> expression_statement .)


state 211

    (129) statement -> iteration_statement .

    CASE            reduce using rule 129 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 129 (statement -> iteration_statement .)
    {               reduce using rule 129 (statement -> iteration_statement .)
    ;               reduce using rule 129 (statement -> iteration_statement .)
    IF              reduce using rule 129 (statement -> iteration_statement .)
    SWITCH          reduce using rule 129 (statement -> iteration_statement .)
    WHILE           reduce using rule 129 (statement -> iteration_statement .)
    DO              reduce using rule 129 (statement -> iteration_statement .)
    FOR             reduce using rule 129 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 129 (statement -> iteration_statement .)
    BREAK           reduce using rule 129 (statement -> iteration_statement .)
    RETURN          reduce using rule 129 (statement -> iteration_statement .)
    VOID            reduce using rule 129 (statement -> iteration_statement .)
    CHAR            reduce using rule 129 (statement -> iteration_statement .)
    INT             reduce using rule 129 (statement -> iteration_statement .)
    FLOAT           reduce using rule 129 (statement -> iteration_statement .)
    TYPE_NAME       reduce using rule 129 (statement -> iteration_statement .)
    INC_OP          reduce using rule 129 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 129 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 129 (statement -> iteration_statement .)
    &               reduce using rule 129 (statement -> iteration_statement .)
    *               reduce using rule 129 (statement -> iteration_statement .)
    +               reduce using rule 129 (statement -> iteration_statement .)
    -               reduce using rule 129 (statement -> iteration_statement .)
    !               reduce using rule 129 (statement -> iteration_statement .)
    (               reduce using rule 129 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 129 (statement -> iteration_statement .)
    INTEGER         reduce using rule 129 (statement -> iteration_statement .)
    DECIMALFLOAT    reduce using rule 129 (statement -> iteration_statement .)
    FLOATVAL        reduce using rule 129 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 129 (statement -> iteration_statement .)
    ESCAPECHAR      reduce using rule 129 (statement -> iteration_statement .)
    STRING          reduce using rule 129 (statement -> iteration_statement .)
    }               reduce using rule 129 (statement -> iteration_statement .)
    ELSE            reduce using rule 129 (statement -> iteration_statement .)


state 212

    (125) statement -> labeled_statement .

    CASE            reduce using rule 125 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 125 (statement -> labeled_statement .)
    {               reduce using rule 125 (statement -> labeled_statement .)
    ;               reduce using rule 125 (statement -> labeled_statement .)
    IF              reduce using rule 125 (statement -> labeled_statement .)
    SWITCH          reduce using rule 125 (statement -> labeled_statement .)
    WHILE           reduce using rule 125 (statement -> labeled_statement .)
    DO              reduce using rule 125 (statement -> labeled_statement .)
    FOR             reduce using rule 125 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 125 (statement -> labeled_statement .)
    BREAK           reduce using rule 125 (statement -> labeled_statement .)
    RETURN          reduce using rule 125 (statement -> labeled_statement .)
    VOID            reduce using rule 125 (statement -> labeled_statement .)
    CHAR            reduce using rule 125 (statement -> labeled_statement .)
    INT             reduce using rule 125 (statement -> labeled_statement .)
    FLOAT           reduce using rule 125 (statement -> labeled_statement .)
    TYPE_NAME       reduce using rule 125 (statement -> labeled_statement .)
    INC_OP          reduce using rule 125 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 125 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 125 (statement -> labeled_statement .)
    &               reduce using rule 125 (statement -> labeled_statement .)
    *               reduce using rule 125 (statement -> labeled_statement .)
    +               reduce using rule 125 (statement -> labeled_statement .)
    -               reduce using rule 125 (statement -> labeled_statement .)
    !               reduce using rule 125 (statement -> labeled_statement .)
    (               reduce using rule 125 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 125 (statement -> labeled_statement .)
    INTEGER         reduce using rule 125 (statement -> labeled_statement .)
    DECIMALFLOAT    reduce using rule 125 (statement -> labeled_statement .)
    FLOATVAL        reduce using rule 125 (statement -> labeled_statement .)
    CHARACTER       reduce using rule 125 (statement -> labeled_statement .)
    ESCAPECHAR      reduce using rule 125 (statement -> labeled_statement .)
    STRING          reduce using rule 125 (statement -> labeled_statement .)
    }               reduce using rule 125 (statement -> labeled_statement .)
    ELSE            reduce using rule 125 (statement -> labeled_statement .)


state 213

    (136) compound_statement_list -> declaration_list .
    (137) compound_statement_list -> declaration_list . compound_declaration_list
    (141) declaration_list -> declaration_list . declaration
    (138) compound_declaration_list -> . statement_list
    (139) compound_declaration_list -> . statement_list compound_statement_list
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (142) statement_list -> . statement
    (143) statement_list -> . statement_list statement
    (83) declaration_specifiers -> . type_specifier
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    }               reduce using rule 136 (compound_statement_list -> declaration_list .)
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    declaration                    shift and go to state 78
    compound_declaration_list      shift and go to state 240
    iteration_statement            shift and go to state 211
    type_specifier                 shift and go to state 7
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    selection_statement            shift and go to state 231
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 226
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    declaration_specifiers         shift and go to state 32
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    statement_list                 shift and go to state 220
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 214

    (162) jump_statement -> RETURN . ;
    (163) jump_statement -> RETURN . expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 241
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 242

state 215

    (135) compound_statement -> { new_scope compound_declaration_list . finish_scope }
    (2) finish_scope -> .

    }               reduce using rule 2 (finish_scope -> .)

    finish_scope                   shift and go to state 243

state 216

    (126) statement -> compound_statement .

    CASE            reduce using rule 126 (statement -> compound_statement .)
    DEFAULT         reduce using rule 126 (statement -> compound_statement .)
    {               reduce using rule 126 (statement -> compound_statement .)
    ;               reduce using rule 126 (statement -> compound_statement .)
    IF              reduce using rule 126 (statement -> compound_statement .)
    SWITCH          reduce using rule 126 (statement -> compound_statement .)
    WHILE           reduce using rule 126 (statement -> compound_statement .)
    DO              reduce using rule 126 (statement -> compound_statement .)
    FOR             reduce using rule 126 (statement -> compound_statement .)
    CONTINUE        reduce using rule 126 (statement -> compound_statement .)
    BREAK           reduce using rule 126 (statement -> compound_statement .)
    RETURN          reduce using rule 126 (statement -> compound_statement .)
    VOID            reduce using rule 126 (statement -> compound_statement .)
    CHAR            reduce using rule 126 (statement -> compound_statement .)
    INT             reduce using rule 126 (statement -> compound_statement .)
    FLOAT           reduce using rule 126 (statement -> compound_statement .)
    TYPE_NAME       reduce using rule 126 (statement -> compound_statement .)
    INC_OP          reduce using rule 126 (statement -> compound_statement .)
    DEC_OP          reduce using rule 126 (statement -> compound_statement .)
    SIZEOF          reduce using rule 126 (statement -> compound_statement .)
    &               reduce using rule 126 (statement -> compound_statement .)
    *               reduce using rule 126 (statement -> compound_statement .)
    +               reduce using rule 126 (statement -> compound_statement .)
    -               reduce using rule 126 (statement -> compound_statement .)
    !               reduce using rule 126 (statement -> compound_statement .)
    (               reduce using rule 126 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 126 (statement -> compound_statement .)
    INTEGER         reduce using rule 126 (statement -> compound_statement .)
    DECIMALFLOAT    reduce using rule 126 (statement -> compound_statement .)
    FLOATVAL        reduce using rule 126 (statement -> compound_statement .)
    CHARACTER       reduce using rule 126 (statement -> compound_statement .)
    ESCAPECHAR      reduce using rule 126 (statement -> compound_statement .)
    STRING          reduce using rule 126 (statement -> compound_statement .)
    }               reduce using rule 126 (statement -> compound_statement .)
    ELSE            reduce using rule 126 (statement -> compound_statement .)


state 217

    (144) expression_statement -> ; .

    CASE            reduce using rule 144 (expression_statement -> ; .)
    DEFAULT         reduce using rule 144 (expression_statement -> ; .)
    {               reduce using rule 144 (expression_statement -> ; .)
    ;               reduce using rule 144 (expression_statement -> ; .)
    IF              reduce using rule 144 (expression_statement -> ; .)
    SWITCH          reduce using rule 144 (expression_statement -> ; .)
    WHILE           reduce using rule 144 (expression_statement -> ; .)
    DO              reduce using rule 144 (expression_statement -> ; .)
    FOR             reduce using rule 144 (expression_statement -> ; .)
    CONTINUE        reduce using rule 144 (expression_statement -> ; .)
    BREAK           reduce using rule 144 (expression_statement -> ; .)
    RETURN          reduce using rule 144 (expression_statement -> ; .)
    VOID            reduce using rule 144 (expression_statement -> ; .)
    CHAR            reduce using rule 144 (expression_statement -> ; .)
    INT             reduce using rule 144 (expression_statement -> ; .)
    FLOAT           reduce using rule 144 (expression_statement -> ; .)
    TYPE_NAME       reduce using rule 144 (expression_statement -> ; .)
    INC_OP          reduce using rule 144 (expression_statement -> ; .)
    DEC_OP          reduce using rule 144 (expression_statement -> ; .)
    SIZEOF          reduce using rule 144 (expression_statement -> ; .)
    &               reduce using rule 144 (expression_statement -> ; .)
    *               reduce using rule 144 (expression_statement -> ; .)
    +               reduce using rule 144 (expression_statement -> ; .)
    -               reduce using rule 144 (expression_statement -> ; .)
    !               reduce using rule 144 (expression_statement -> ; .)
    (               reduce using rule 144 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 144 (expression_statement -> ; .)
    INTEGER         reduce using rule 144 (expression_statement -> ; .)
    DECIMALFLOAT    reduce using rule 144 (expression_statement -> ; .)
    FLOATVAL        reduce using rule 144 (expression_statement -> ; .)
    CHARACTER       reduce using rule 144 (expression_statement -> ; .)
    ESCAPECHAR      reduce using rule 144 (expression_statement -> ; .)
    STRING          reduce using rule 144 (expression_statement -> ; .)
    }               reduce using rule 144 (expression_statement -> ; .)
    ELSE            reduce using rule 144 (expression_statement -> ; .)
    )               reduce using rule 144 (expression_statement -> ; .)


state 218

    (156) iteration_statement -> FOR . get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> FOR . get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (147) get_labels -> .

    (               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 244

state 219

    (160) jump_statement -> CONTINUE . ;

    ;               shift and go to state 245


state 220

    (138) compound_declaration_list -> statement_list .
    (139) compound_declaration_list -> statement_list . compound_statement_list
    (143) statement_list -> statement_list . statement
    (136) compound_statement_list -> . declaration_list
    (137) compound_statement_list -> . declaration_list compound_declaration_list
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (140) declaration_list -> . declaration
    (141) declaration_list -> . declaration_list declaration
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (79) declaration -> . declaration_specifiers ;
    (80) declaration -> . declaration_specifiers error
    (81) declaration -> . declaration_specifiers init_declarator_list ;
    (82) declaration -> . declaration_specifiers init_declarator_list error
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (83) declaration_specifiers -> . type_specifier
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (88) type_specifier -> . VOID
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . FLOAT
    (92) type_specifier -> . TYPE_NAME
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    }               reduce using rule 138 (compound_declaration_list -> statement_list .)
    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    VOID            shift and go to state 2
    CHAR            shift and go to state 4
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    TYPE_NAME       shift and go to state 1
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    declaration                    shift and go to state 29
    iteration_statement            shift and go to state 211
    type_specifier                 shift and go to state 7
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    selection_statement            shift and go to state 231
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 246
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    declaration_specifiers         shift and go to state 32
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    declaration_list               shift and go to state 213
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221
    compound_statement_list        shift and go to state 247

state 221

    (145) expression_statement -> expression . ;
    (146) expression_statement -> expression . error
    (77) expression -> expression . , assignment_expression

    ;               shift and go to state 248
    error           shift and go to state 249
    ,               shift and go to state 159


state 222

    (132) labeled_statement -> DEFAULT . : statement

    :               shift and go to state 250


state 223

    (154) iteration_statement -> WHILE . get_labels ( expression ) statement release_labels
    (147) get_labels -> .

    (               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 251

state 224

    (131) labeled_statement -> CASE . constant_expression : statement
    (78) constant_expression -> . conditional_expression
    (64) conditional_expression -> . logical_or_expression
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING

    (               shift and go to state 46
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    exclusive_or_expression        shift and go to state 38
    additive_expression            shift and go to state 55
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    relational_expression          shift and go to state 50
    multiplicative_expression      shift and go to state 64
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    constant_expression            shift and go to state 252
    conditional_expression         shift and go to state 67
    identifier                     shift and go to state 68

state 225

    (153) selection_statement -> SWITCH . get_labels ( expression ) switch_label statement release_switch_label release_labels
    (147) get_labels -> .

    (               reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 253

state 226

    (142) statement_list -> statement .

    CASE            reduce using rule 142 (statement_list -> statement .)
    DEFAULT         reduce using rule 142 (statement_list -> statement .)
    {               reduce using rule 142 (statement_list -> statement .)
    ;               reduce using rule 142 (statement_list -> statement .)
    IF              reduce using rule 142 (statement_list -> statement .)
    SWITCH          reduce using rule 142 (statement_list -> statement .)
    WHILE           reduce using rule 142 (statement_list -> statement .)
    DO              reduce using rule 142 (statement_list -> statement .)
    FOR             reduce using rule 142 (statement_list -> statement .)
    CONTINUE        reduce using rule 142 (statement_list -> statement .)
    BREAK           reduce using rule 142 (statement_list -> statement .)
    RETURN          reduce using rule 142 (statement_list -> statement .)
    VOID            reduce using rule 142 (statement_list -> statement .)
    CHAR            reduce using rule 142 (statement_list -> statement .)
    INT             reduce using rule 142 (statement_list -> statement .)
    FLOAT           reduce using rule 142 (statement_list -> statement .)
    TYPE_NAME       reduce using rule 142 (statement_list -> statement .)
    INC_OP          reduce using rule 142 (statement_list -> statement .)
    DEC_OP          reduce using rule 142 (statement_list -> statement .)
    SIZEOF          reduce using rule 142 (statement_list -> statement .)
    &               reduce using rule 142 (statement_list -> statement .)
    *               reduce using rule 142 (statement_list -> statement .)
    +               reduce using rule 142 (statement_list -> statement .)
    -               reduce using rule 142 (statement_list -> statement .)
    !               reduce using rule 142 (statement_list -> statement .)
    (               reduce using rule 142 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 142 (statement_list -> statement .)
    INTEGER         reduce using rule 142 (statement_list -> statement .)
    DECIMALFLOAT    reduce using rule 142 (statement_list -> statement .)
    FLOATVAL        reduce using rule 142 (statement_list -> statement .)
    CHARACTER       reduce using rule 142 (statement_list -> statement .)
    ESCAPECHAR      reduce using rule 142 (statement_list -> statement .)
    STRING          reduce using rule 142 (statement_list -> statement .)
    }               reduce using rule 142 (statement_list -> statement .)


state 227

    (130) statement -> jump_statement .

    CASE            reduce using rule 130 (statement -> jump_statement .)
    DEFAULT         reduce using rule 130 (statement -> jump_statement .)
    {               reduce using rule 130 (statement -> jump_statement .)
    ;               reduce using rule 130 (statement -> jump_statement .)
    IF              reduce using rule 130 (statement -> jump_statement .)
    SWITCH          reduce using rule 130 (statement -> jump_statement .)
    WHILE           reduce using rule 130 (statement -> jump_statement .)
    DO              reduce using rule 130 (statement -> jump_statement .)
    FOR             reduce using rule 130 (statement -> jump_statement .)
    CONTINUE        reduce using rule 130 (statement -> jump_statement .)
    BREAK           reduce using rule 130 (statement -> jump_statement .)
    RETURN          reduce using rule 130 (statement -> jump_statement .)
    VOID            reduce using rule 130 (statement -> jump_statement .)
    CHAR            reduce using rule 130 (statement -> jump_statement .)
    INT             reduce using rule 130 (statement -> jump_statement .)
    FLOAT           reduce using rule 130 (statement -> jump_statement .)
    TYPE_NAME       reduce using rule 130 (statement -> jump_statement .)
    INC_OP          reduce using rule 130 (statement -> jump_statement .)
    DEC_OP          reduce using rule 130 (statement -> jump_statement .)
    SIZEOF          reduce using rule 130 (statement -> jump_statement .)
    &               reduce using rule 130 (statement -> jump_statement .)
    *               reduce using rule 130 (statement -> jump_statement .)
    +               reduce using rule 130 (statement -> jump_statement .)
    -               reduce using rule 130 (statement -> jump_statement .)
    !               reduce using rule 130 (statement -> jump_statement .)
    (               reduce using rule 130 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 130 (statement -> jump_statement .)
    INTEGER         reduce using rule 130 (statement -> jump_statement .)
    DECIMALFLOAT    reduce using rule 130 (statement -> jump_statement .)
    FLOATVAL        reduce using rule 130 (statement -> jump_statement .)
    CHARACTER       reduce using rule 130 (statement -> jump_statement .)
    ESCAPECHAR      reduce using rule 130 (statement -> jump_statement .)
    STRING          reduce using rule 130 (statement -> jump_statement .)
    }               reduce using rule 130 (statement -> jump_statement .)
    ELSE            reduce using rule 130 (statement -> jump_statement .)


state 228

    (161) jump_statement -> BREAK . ;

    ;               shift and go to state 254


state 229

    (134) compound_statement -> { new_scope compound_statement_list . finish_scope }
    (2) finish_scope -> .

    }               reduce using rule 2 (finish_scope -> .)

    finish_scope                   shift and go to state 255

state 230

    (155) iteration_statement -> DO . get_labels statement WHILE ( expression ) ; release_labels
    (147) get_labels -> .

    CASE            reduce using rule 147 (get_labels -> .)
    DEFAULT         reduce using rule 147 (get_labels -> .)
    {               reduce using rule 147 (get_labels -> .)
    ;               reduce using rule 147 (get_labels -> .)
    IF              reduce using rule 147 (get_labels -> .)
    SWITCH          reduce using rule 147 (get_labels -> .)
    WHILE           reduce using rule 147 (get_labels -> .)
    DO              reduce using rule 147 (get_labels -> .)
    FOR             reduce using rule 147 (get_labels -> .)
    CONTINUE        reduce using rule 147 (get_labels -> .)
    BREAK           reduce using rule 147 (get_labels -> .)
    RETURN          reduce using rule 147 (get_labels -> .)
    INC_OP          reduce using rule 147 (get_labels -> .)
    DEC_OP          reduce using rule 147 (get_labels -> .)
    SIZEOF          reduce using rule 147 (get_labels -> .)
    &               reduce using rule 147 (get_labels -> .)
    *               reduce using rule 147 (get_labels -> .)
    +               reduce using rule 147 (get_labels -> .)
    -               reduce using rule 147 (get_labels -> .)
    !               reduce using rule 147 (get_labels -> .)
    (               reduce using rule 147 (get_labels -> .)
    IDENTIFIER      reduce using rule 147 (get_labels -> .)
    INTEGER         reduce using rule 147 (get_labels -> .)
    DECIMALFLOAT    reduce using rule 147 (get_labels -> .)
    FLOATVAL        reduce using rule 147 (get_labels -> .)
    CHARACTER       reduce using rule 147 (get_labels -> .)
    ESCAPECHAR      reduce using rule 147 (get_labels -> .)
    STRING          reduce using rule 147 (get_labels -> .)

    get_labels                     shift and go to state 256

state 231

    (128) statement -> selection_statement .

    CASE            reduce using rule 128 (statement -> selection_statement .)
    DEFAULT         reduce using rule 128 (statement -> selection_statement .)
    {               reduce using rule 128 (statement -> selection_statement .)
    ;               reduce using rule 128 (statement -> selection_statement .)
    IF              reduce using rule 128 (statement -> selection_statement .)
    SWITCH          reduce using rule 128 (statement -> selection_statement .)
    WHILE           reduce using rule 128 (statement -> selection_statement .)
    DO              reduce using rule 128 (statement -> selection_statement .)
    FOR             reduce using rule 128 (statement -> selection_statement .)
    CONTINUE        reduce using rule 128 (statement -> selection_statement .)
    BREAK           reduce using rule 128 (statement -> selection_statement .)
    RETURN          reduce using rule 128 (statement -> selection_statement .)
    VOID            reduce using rule 128 (statement -> selection_statement .)
    CHAR            reduce using rule 128 (statement -> selection_statement .)
    INT             reduce using rule 128 (statement -> selection_statement .)
    FLOAT           reduce using rule 128 (statement -> selection_statement .)
    TYPE_NAME       reduce using rule 128 (statement -> selection_statement .)
    INC_OP          reduce using rule 128 (statement -> selection_statement .)
    DEC_OP          reduce using rule 128 (statement -> selection_statement .)
    SIZEOF          reduce using rule 128 (statement -> selection_statement .)
    &               reduce using rule 128 (statement -> selection_statement .)
    *               reduce using rule 128 (statement -> selection_statement .)
    +               reduce using rule 128 (statement -> selection_statement .)
    -               reduce using rule 128 (statement -> selection_statement .)
    !               reduce using rule 128 (statement -> selection_statement .)
    (               reduce using rule 128 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 128 (statement -> selection_statement .)
    INTEGER         reduce using rule 128 (statement -> selection_statement .)
    DECIMALFLOAT    reduce using rule 128 (statement -> selection_statement .)
    FLOATVAL        reduce using rule 128 (statement -> selection_statement .)
    CHARACTER       reduce using rule 128 (statement -> selection_statement .)
    ESCAPECHAR      reduce using rule 128 (statement -> selection_statement .)
    STRING          reduce using rule 128 (statement -> selection_statement .)
    }               reduce using rule 128 (statement -> selection_statement .)
    ELSE            reduce using rule 128 (statement -> selection_statement .)


state 232

    (151) selection_statement -> IF . ( expression ) statement
    (152) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 257


state 233

    (174) function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels . unset_function_scope
    (171) unset_function_scope -> .

    VOID            reduce using rule 171 (unset_function_scope -> .)
    CHAR            reduce using rule 171 (unset_function_scope -> .)
    INT             reduce using rule 171 (unset_function_scope -> .)
    FLOAT           reduce using rule 171 (unset_function_scope -> .)
    TYPE_NAME       reduce using rule 171 (unset_function_scope -> .)
    *               reduce using rule 171 (unset_function_scope -> .)
    IDENTIFIER      reduce using rule 171 (unset_function_scope -> .)
    $end            reduce using rule 171 (unset_function_scope -> .)

    unset_function_scope           shift and go to state 258

state 234

    (119) direct_abstract_declarator -> [ constant_expression ] .

    ,               reduce using rule 119 (direct_abstract_declarator -> [ constant_expression ] .)
    )               reduce using rule 119 (direct_abstract_declarator -> [ constant_expression ] .)


state 235

    (22) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 22 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 22 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 236

    (124) initializer_list -> initializer_list , initializer .

    }               reduce using rule 124 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 124 (initializer_list -> initializer_list , initializer .)


state 237

    (122) initializer -> { initializer_list , } .

    }               reduce using rule 122 (initializer -> { initializer_list , } .)
    ,               reduce using rule 122 (initializer -> { initializer_list , } .)
    ;               reduce using rule 122 (initializer -> { initializer_list , } .)
    error           reduce using rule 122 (initializer -> { initializer_list , } .)


state 238

    (173) function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .

    VOID            reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    CHAR            reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    INT             reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    FLOAT           reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    TYPE_NAME       reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    *               reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    IDENTIFIER      reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)
    $end            reduce using rule 173 (function_definition -> declaration_specifiers declarator function_scope get_labels compound_statement release_labels unset_function_scope .)


state 239

    (172) function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels . unset_function_scope
    (171) unset_function_scope -> .

    VOID            reduce using rule 171 (unset_function_scope -> .)
    CHAR            reduce using rule 171 (unset_function_scope -> .)
    INT             reduce using rule 171 (unset_function_scope -> .)
    FLOAT           reduce using rule 171 (unset_function_scope -> .)
    TYPE_NAME       reduce using rule 171 (unset_function_scope -> .)
    *               reduce using rule 171 (unset_function_scope -> .)
    IDENTIFIER      reduce using rule 171 (unset_function_scope -> .)
    $end            reduce using rule 171 (unset_function_scope -> .)

    unset_function_scope           shift and go to state 259

state 240

    (137) compound_statement_list -> declaration_list compound_declaration_list .

    }               reduce using rule 137 (compound_statement_list -> declaration_list compound_declaration_list .)


state 241

    (162) jump_statement -> RETURN ; .

    WHILE           reduce using rule 162 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 162 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 162 (jump_statement -> RETURN ; .)
    {               reduce using rule 162 (jump_statement -> RETURN ; .)
    ;               reduce using rule 162 (jump_statement -> RETURN ; .)
    IF              reduce using rule 162 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 162 (jump_statement -> RETURN ; .)
    DO              reduce using rule 162 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 162 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 162 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 162 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 162 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 162 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 162 (jump_statement -> RETURN ; .)
    INT             reduce using rule 162 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 162 (jump_statement -> RETURN ; .)
    TYPE_NAME       reduce using rule 162 (jump_statement -> RETURN ; .)
    INC_OP          reduce using rule 162 (jump_statement -> RETURN ; .)
    DEC_OP          reduce using rule 162 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 162 (jump_statement -> RETURN ; .)
    &               reduce using rule 162 (jump_statement -> RETURN ; .)
    *               reduce using rule 162 (jump_statement -> RETURN ; .)
    +               reduce using rule 162 (jump_statement -> RETURN ; .)
    -               reduce using rule 162 (jump_statement -> RETURN ; .)
    !               reduce using rule 162 (jump_statement -> RETURN ; .)
    (               reduce using rule 162 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 162 (jump_statement -> RETURN ; .)
    INTEGER         reduce using rule 162 (jump_statement -> RETURN ; .)
    DECIMALFLOAT    reduce using rule 162 (jump_statement -> RETURN ; .)
    FLOATVAL        reduce using rule 162 (jump_statement -> RETURN ; .)
    CHARACTER       reduce using rule 162 (jump_statement -> RETURN ; .)
    ESCAPECHAR      reduce using rule 162 (jump_statement -> RETURN ; .)
    STRING          reduce using rule 162 (jump_statement -> RETURN ; .)
    }               reduce using rule 162 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 162 (jump_statement -> RETURN ; .)


state 242

    (163) jump_statement -> RETURN expression . ;
    (77) expression -> expression . , assignment_expression

    ;               shift and go to state 260
    ,               shift and go to state 159


state 243

    (135) compound_statement -> { new_scope compound_declaration_list finish_scope . }

    }               shift and go to state 261


state 244

    (156) iteration_statement -> FOR get_labels . ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> FOR get_labels . ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels

    (               shift and go to state 262


state 245

    (160) jump_statement -> CONTINUE ; .

    WHILE           reduce using rule 160 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 160 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 160 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 160 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 160 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 160 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 160 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 160 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 160 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 160 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 160 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 160 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 160 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 160 (jump_statement -> CONTINUE ; .)
    TYPE_NAME       reduce using rule 160 (jump_statement -> CONTINUE ; .)
    INC_OP          reduce using rule 160 (jump_statement -> CONTINUE ; .)
    DEC_OP          reduce using rule 160 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 160 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 160 (jump_statement -> CONTINUE ; .)
    INTEGER         reduce using rule 160 (jump_statement -> CONTINUE ; .)
    DECIMALFLOAT    reduce using rule 160 (jump_statement -> CONTINUE ; .)
    FLOATVAL        reduce using rule 160 (jump_statement -> CONTINUE ; .)
    CHARACTER       reduce using rule 160 (jump_statement -> CONTINUE ; .)
    ESCAPECHAR      reduce using rule 160 (jump_statement -> CONTINUE ; .)
    STRING          reduce using rule 160 (jump_statement -> CONTINUE ; .)
    }               reduce using rule 160 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 160 (jump_statement -> CONTINUE ; .)


state 246

    (143) statement_list -> statement_list statement .

    CASE            reduce using rule 143 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 143 (statement_list -> statement_list statement .)
    {               reduce using rule 143 (statement_list -> statement_list statement .)
    ;               reduce using rule 143 (statement_list -> statement_list statement .)
    IF              reduce using rule 143 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 143 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 143 (statement_list -> statement_list statement .)
    DO              reduce using rule 143 (statement_list -> statement_list statement .)
    FOR             reduce using rule 143 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 143 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 143 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 143 (statement_list -> statement_list statement .)
    VOID            reduce using rule 143 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 143 (statement_list -> statement_list statement .)
    INT             reduce using rule 143 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 143 (statement_list -> statement_list statement .)
    TYPE_NAME       reduce using rule 143 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 143 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 143 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 143 (statement_list -> statement_list statement .)
    &               reduce using rule 143 (statement_list -> statement_list statement .)
    *               reduce using rule 143 (statement_list -> statement_list statement .)
    +               reduce using rule 143 (statement_list -> statement_list statement .)
    -               reduce using rule 143 (statement_list -> statement_list statement .)
    !               reduce using rule 143 (statement_list -> statement_list statement .)
    (               reduce using rule 143 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 143 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 143 (statement_list -> statement_list statement .)
    DECIMALFLOAT    reduce using rule 143 (statement_list -> statement_list statement .)
    FLOATVAL        reduce using rule 143 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 143 (statement_list -> statement_list statement .)
    ESCAPECHAR      reduce using rule 143 (statement_list -> statement_list statement .)
    STRING          reduce using rule 143 (statement_list -> statement_list statement .)
    }               reduce using rule 143 (statement_list -> statement_list statement .)


state 247

    (139) compound_declaration_list -> statement_list compound_statement_list .

    }               reduce using rule 139 (compound_declaration_list -> statement_list compound_statement_list .)


state 248

    (145) expression_statement -> expression ; .

    CASE            reduce using rule 145 (expression_statement -> expression ; .)
    DEFAULT         reduce using rule 145 (expression_statement -> expression ; .)
    {               reduce using rule 145 (expression_statement -> expression ; .)
    ;               reduce using rule 145 (expression_statement -> expression ; .)
    IF              reduce using rule 145 (expression_statement -> expression ; .)
    SWITCH          reduce using rule 145 (expression_statement -> expression ; .)
    WHILE           reduce using rule 145 (expression_statement -> expression ; .)
    DO              reduce using rule 145 (expression_statement -> expression ; .)
    FOR             reduce using rule 145 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 145 (expression_statement -> expression ; .)
    BREAK           reduce using rule 145 (expression_statement -> expression ; .)
    RETURN          reduce using rule 145 (expression_statement -> expression ; .)
    VOID            reduce using rule 145 (expression_statement -> expression ; .)
    CHAR            reduce using rule 145 (expression_statement -> expression ; .)
    INT             reduce using rule 145 (expression_statement -> expression ; .)
    FLOAT           reduce using rule 145 (expression_statement -> expression ; .)
    TYPE_NAME       reduce using rule 145 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 145 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 145 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 145 (expression_statement -> expression ; .)
    &               reduce using rule 145 (expression_statement -> expression ; .)
    *               reduce using rule 145 (expression_statement -> expression ; .)
    +               reduce using rule 145 (expression_statement -> expression ; .)
    -               reduce using rule 145 (expression_statement -> expression ; .)
    !               reduce using rule 145 (expression_statement -> expression ; .)
    (               reduce using rule 145 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 145 (expression_statement -> expression ; .)
    INTEGER         reduce using rule 145 (expression_statement -> expression ; .)
    DECIMALFLOAT    reduce using rule 145 (expression_statement -> expression ; .)
    FLOATVAL        reduce using rule 145 (expression_statement -> expression ; .)
    CHARACTER       reduce using rule 145 (expression_statement -> expression ; .)
    ESCAPECHAR      reduce using rule 145 (expression_statement -> expression ; .)
    STRING          reduce using rule 145 (expression_statement -> expression ; .)
    }               reduce using rule 145 (expression_statement -> expression ; .)
    ELSE            reduce using rule 145 (expression_statement -> expression ; .)
    )               reduce using rule 145 (expression_statement -> expression ; .)


state 249

    (146) expression_statement -> expression error .

    CASE            reduce using rule 146 (expression_statement -> expression error .)
    DEFAULT         reduce using rule 146 (expression_statement -> expression error .)
    {               reduce using rule 146 (expression_statement -> expression error .)
    ;               reduce using rule 146 (expression_statement -> expression error .)
    IF              reduce using rule 146 (expression_statement -> expression error .)
    SWITCH          reduce using rule 146 (expression_statement -> expression error .)
    WHILE           reduce using rule 146 (expression_statement -> expression error .)
    DO              reduce using rule 146 (expression_statement -> expression error .)
    FOR             reduce using rule 146 (expression_statement -> expression error .)
    CONTINUE        reduce using rule 146 (expression_statement -> expression error .)
    BREAK           reduce using rule 146 (expression_statement -> expression error .)
    RETURN          reduce using rule 146 (expression_statement -> expression error .)
    VOID            reduce using rule 146 (expression_statement -> expression error .)
    CHAR            reduce using rule 146 (expression_statement -> expression error .)
    INT             reduce using rule 146 (expression_statement -> expression error .)
    FLOAT           reduce using rule 146 (expression_statement -> expression error .)
    TYPE_NAME       reduce using rule 146 (expression_statement -> expression error .)
    INC_OP          reduce using rule 146 (expression_statement -> expression error .)
    DEC_OP          reduce using rule 146 (expression_statement -> expression error .)
    SIZEOF          reduce using rule 146 (expression_statement -> expression error .)
    &               reduce using rule 146 (expression_statement -> expression error .)
    *               reduce using rule 146 (expression_statement -> expression error .)
    +               reduce using rule 146 (expression_statement -> expression error .)
    -               reduce using rule 146 (expression_statement -> expression error .)
    !               reduce using rule 146 (expression_statement -> expression error .)
    (               reduce using rule 146 (expression_statement -> expression error .)
    IDENTIFIER      reduce using rule 146 (expression_statement -> expression error .)
    INTEGER         reduce using rule 146 (expression_statement -> expression error .)
    DECIMALFLOAT    reduce using rule 146 (expression_statement -> expression error .)
    FLOATVAL        reduce using rule 146 (expression_statement -> expression error .)
    CHARACTER       reduce using rule 146 (expression_statement -> expression error .)
    ESCAPECHAR      reduce using rule 146 (expression_statement -> expression error .)
    STRING          reduce using rule 146 (expression_statement -> expression error .)
    }               reduce using rule 146 (expression_statement -> expression error .)
    ELSE            reduce using rule 146 (expression_statement -> expression error .)
    )               reduce using rule 146 (expression_statement -> expression error .)


state 250

    (132) labeled_statement -> DEFAULT : . statement
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 263
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 251

    (154) iteration_statement -> WHILE get_labels . ( expression ) statement release_labels

    (               shift and go to state 264


state 252

    (131) labeled_statement -> CASE constant_expression . : statement

    :               shift and go to state 265


state 253

    (153) selection_statement -> SWITCH get_labels . ( expression ) switch_label statement release_switch_label release_labels

    (               shift and go to state 266


state 254

    (161) jump_statement -> BREAK ; .

    WHILE           reduce using rule 161 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 161 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 161 (jump_statement -> BREAK ; .)
    {               reduce using rule 161 (jump_statement -> BREAK ; .)
    ;               reduce using rule 161 (jump_statement -> BREAK ; .)
    IF              reduce using rule 161 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 161 (jump_statement -> BREAK ; .)
    DO              reduce using rule 161 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 161 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 161 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 161 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 161 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 161 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 161 (jump_statement -> BREAK ; .)
    INT             reduce using rule 161 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 161 (jump_statement -> BREAK ; .)
    TYPE_NAME       reduce using rule 161 (jump_statement -> BREAK ; .)
    INC_OP          reduce using rule 161 (jump_statement -> BREAK ; .)
    DEC_OP          reduce using rule 161 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 161 (jump_statement -> BREAK ; .)
    &               reduce using rule 161 (jump_statement -> BREAK ; .)
    *               reduce using rule 161 (jump_statement -> BREAK ; .)
    +               reduce using rule 161 (jump_statement -> BREAK ; .)
    -               reduce using rule 161 (jump_statement -> BREAK ; .)
    !               reduce using rule 161 (jump_statement -> BREAK ; .)
    (               reduce using rule 161 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 161 (jump_statement -> BREAK ; .)
    INTEGER         reduce using rule 161 (jump_statement -> BREAK ; .)
    DECIMALFLOAT    reduce using rule 161 (jump_statement -> BREAK ; .)
    FLOATVAL        reduce using rule 161 (jump_statement -> BREAK ; .)
    CHARACTER       reduce using rule 161 (jump_statement -> BREAK ; .)
    ESCAPECHAR      reduce using rule 161 (jump_statement -> BREAK ; .)
    STRING          reduce using rule 161 (jump_statement -> BREAK ; .)
    }               reduce using rule 161 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 161 (jump_statement -> BREAK ; .)


state 255

    (134) compound_statement -> { new_scope compound_statement_list finish_scope . }

    }               shift and go to state 267


state 256

    (155) iteration_statement -> DO get_labels . statement WHILE ( expression ) ; release_labels
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 268
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 257

    (151) selection_statement -> IF ( . expression ) statement
    (152) selection_statement -> IF ( . expression ) statement ELSE statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 269

state 258

    (174) function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .

    VOID            reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    CHAR            reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    INT             reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    FLOAT           reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    TYPE_NAME       reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    *               reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    IDENTIFIER      reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    $end            reduce using rule 174 (function_definition -> declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)


state 259

    (172) function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .

    VOID            reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    CHAR            reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    INT             reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    FLOAT           reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    TYPE_NAME       reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    *               reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    IDENTIFIER      reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)
    $end            reduce using rule 172 (function_definition -> declaration_specifiers declarator declaration_list function_scope get_labels compound_statement release_labels unset_function_scope .)


state 260

    (163) jump_statement -> RETURN expression ; .

    WHILE           reduce using rule 163 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 163 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 163 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 163 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 163 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 163 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 163 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 163 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 163 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 163 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 163 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 163 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 163 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 163 (jump_statement -> RETURN expression ; .)
    TYPE_NAME       reduce using rule 163 (jump_statement -> RETURN expression ; .)
    INC_OP          reduce using rule 163 (jump_statement -> RETURN expression ; .)
    DEC_OP          reduce using rule 163 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 163 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 163 (jump_statement -> RETURN expression ; .)
    INTEGER         reduce using rule 163 (jump_statement -> RETURN expression ; .)
    DECIMALFLOAT    reduce using rule 163 (jump_statement -> RETURN expression ; .)
    FLOATVAL        reduce using rule 163 (jump_statement -> RETURN expression ; .)
    CHARACTER       reduce using rule 163 (jump_statement -> RETURN expression ; .)
    ESCAPECHAR      reduce using rule 163 (jump_statement -> RETURN expression ; .)
    STRING          reduce using rule 163 (jump_statement -> RETURN expression ; .)
    }               reduce using rule 163 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 163 (jump_statement -> RETURN expression ; .)


state 261

    (135) compound_statement -> { new_scope compound_declaration_list finish_scope } .

    CASE            reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    DEFAULT         reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    {               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    ;               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    IF              reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    SWITCH          reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    WHILE           reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    DO              reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    FOR             reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    CONTINUE        reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    BREAK           reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    RETURN          reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    VOID            reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    CHAR            reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    INT             reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    FLOAT           reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    TYPE_NAME       reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    INC_OP          reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    DEC_OP          reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    SIZEOF          reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    &               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    *               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    +               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    -               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    !               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    (               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    IDENTIFIER      reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    INTEGER         reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    DECIMALFLOAT    reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    FLOATVAL        reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    CHARACTER       reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    ESCAPECHAR      reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    STRING          reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    }               reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    ELSE            reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)
    $end            reduce using rule 135 (compound_statement -> { new_scope compound_declaration_list finish_scope } .)


state 262

    (156) iteration_statement -> FOR get_labels ( . expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> FOR get_labels ( . expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 217
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 270
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 263

    (132) labeled_statement -> DEFAULT : statement .

    CASE            reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    DEFAULT         reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    {               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    ;               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    IF              reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    SWITCH          reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    WHILE           reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    DO              reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    FOR             reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    CONTINUE        reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    BREAK           reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    RETURN          reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    VOID            reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    CHAR            reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    INT             reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    FLOAT           reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    TYPE_NAME       reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    INC_OP          reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    DEC_OP          reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    SIZEOF          reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    &               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    *               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    +               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    -               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    !               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    (               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    IDENTIFIER      reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    INTEGER         reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    DECIMALFLOAT    reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    FLOATVAL        reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    CHARACTER       reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    ESCAPECHAR      reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    STRING          reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    }               reduce using rule 132 (labeled_statement -> DEFAULT : statement .)
    ELSE            reduce using rule 132 (labeled_statement -> DEFAULT : statement .)


state 264

    (154) iteration_statement -> WHILE get_labels ( . expression ) statement release_labels
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 271

state 265

    (131) labeled_statement -> CASE constant_expression : . statement
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 272
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 266

    (153) selection_statement -> SWITCH get_labels ( . expression ) switch_label statement release_switch_label release_labels
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 273

state 267

    (134) compound_statement -> { new_scope compound_statement_list finish_scope } .

    CASE            reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    DEFAULT         reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    {               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    ;               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    IF              reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    SWITCH          reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    WHILE           reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    DO              reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    FOR             reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    CONTINUE        reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    BREAK           reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    RETURN          reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    VOID            reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    CHAR            reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    INT             reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    FLOAT           reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    TYPE_NAME       reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    INC_OP          reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    DEC_OP          reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    SIZEOF          reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    &               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    *               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    +               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    -               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    !               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    (               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    IDENTIFIER      reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    INTEGER         reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    DECIMALFLOAT    reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    FLOATVAL        reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    CHARACTER       reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    ESCAPECHAR      reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    STRING          reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    }               reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    ELSE            reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)
    $end            reduce using rule 134 (compound_statement -> { new_scope compound_statement_list finish_scope } .)


state 268

    (155) iteration_statement -> DO get_labels statement . WHILE ( expression ) ; release_labels

    WHILE           shift and go to state 274


state 269

    (151) selection_statement -> IF ( expression . ) statement
    (152) selection_statement -> IF ( expression . ) statement ELSE statement
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 275
    ,               shift and go to state 159


state 270

    (156) iteration_statement -> FOR get_labels ( expression_statement . expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> FOR get_labels ( expression_statement . expression_statement expression _embed1_iteration_statement ) statement release_labels
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 217
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 276
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 271

    (154) iteration_statement -> WHILE get_labels ( expression . ) statement release_labels
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 277
    ,               shift and go to state 159


state 272

    (131) labeled_statement -> CASE constant_expression : statement .

    CASE            reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    {               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    ;               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    IF              reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    WHILE           reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    DO              reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    FOR             reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    BREAK           reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    RETURN          reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    VOID            reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    CHAR            reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    INT             reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    TYPE_NAME       reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    INC_OP          reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    DEC_OP          reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    &               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    *               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    +               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    -               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    !               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    (               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    IDENTIFIER      reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    INTEGER         reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    DECIMALFLOAT    reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    FLOATVAL        reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    CHARACTER       reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    ESCAPECHAR      reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    STRING          reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    }               reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)
    ELSE            reduce using rule 131 (labeled_statement -> CASE constant_expression : statement .)


state 273

    (153) selection_statement -> SWITCH get_labels ( expression . ) switch_label statement release_switch_label release_labels
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 278
    ,               shift and go to state 159


state 274

    (155) iteration_statement -> DO get_labels statement WHILE . ( expression ) ; release_labels

    (               shift and go to state 279


state 275

    (151) selection_statement -> IF ( expression ) . statement
    (152) selection_statement -> IF ( expression ) . statement ELSE statement
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 280
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 276

    (156) iteration_statement -> FOR get_labels ( expression_statement expression_statement . _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> FOR get_labels ( expression_statement expression_statement . expression _embed1_iteration_statement ) statement release_labels
    (158) _embed0_iteration_statement -> .
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    )               reduce using rule 158 (_embed0_iteration_statement -> .)
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    _embed0_iteration_statement    shift and go to state 281
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 282

state 277

    (154) iteration_statement -> WHILE get_labels ( expression ) . statement release_labels
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 283
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 278

    (153) selection_statement -> SWITCH get_labels ( expression ) . switch_label statement release_switch_label release_labels
    (149) switch_label -> .

    CASE            reduce using rule 149 (switch_label -> .)
    DEFAULT         reduce using rule 149 (switch_label -> .)
    {               reduce using rule 149 (switch_label -> .)
    ;               reduce using rule 149 (switch_label -> .)
    IF              reduce using rule 149 (switch_label -> .)
    SWITCH          reduce using rule 149 (switch_label -> .)
    WHILE           reduce using rule 149 (switch_label -> .)
    DO              reduce using rule 149 (switch_label -> .)
    FOR             reduce using rule 149 (switch_label -> .)
    CONTINUE        reduce using rule 149 (switch_label -> .)
    BREAK           reduce using rule 149 (switch_label -> .)
    RETURN          reduce using rule 149 (switch_label -> .)
    INC_OP          reduce using rule 149 (switch_label -> .)
    DEC_OP          reduce using rule 149 (switch_label -> .)
    SIZEOF          reduce using rule 149 (switch_label -> .)
    &               reduce using rule 149 (switch_label -> .)
    *               reduce using rule 149 (switch_label -> .)
    +               reduce using rule 149 (switch_label -> .)
    -               reduce using rule 149 (switch_label -> .)
    !               reduce using rule 149 (switch_label -> .)
    (               reduce using rule 149 (switch_label -> .)
    IDENTIFIER      reduce using rule 149 (switch_label -> .)
    INTEGER         reduce using rule 149 (switch_label -> .)
    DECIMALFLOAT    reduce using rule 149 (switch_label -> .)
    FLOATVAL        reduce using rule 149 (switch_label -> .)
    CHARACTER       reduce using rule 149 (switch_label -> .)
    ESCAPECHAR      reduce using rule 149 (switch_label -> .)
    STRING          reduce using rule 149 (switch_label -> .)

    switch_label                   shift and go to state 284

state 279

    (155) iteration_statement -> DO get_labels statement WHILE ( . expression ) ; release_labels
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 42
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    relational_expression          shift and go to state 50
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    unary_operator                 shift and go to state 66
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 285

state 280

    (151) selection_statement -> IF ( expression ) statement .
    (152) selection_statement -> IF ( expression ) statement . ELSE statement

    CASE            reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    TYPE_NAME       reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    INTEGER         reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    DECIMALFLOAT    reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    FLOATVAL        reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    CHARACTER       reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    ESCAPECHAR      reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    STRING          reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    }               reduce using rule 151 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 286

  ! ELSE            [ reduce using rule 151 (selection_statement -> IF ( expression ) statement .) ]


state 281

    (156) iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement . ) statement release_labels

    )               shift and go to state 287


state 282

    (157) iteration_statement -> FOR get_labels ( expression_statement expression_statement expression . _embed1_iteration_statement ) statement release_labels
    (77) expression -> expression . , assignment_expression
    (159) _embed1_iteration_statement -> .

    ,               shift and go to state 159
    )               reduce using rule 159 (_embed1_iteration_statement -> .)

    _embed1_iteration_statement    shift and go to state 288

state 283

    (154) iteration_statement -> WHILE get_labels ( expression ) statement . release_labels
    (148) release_labels -> .

    CASE            reduce using rule 148 (release_labels -> .)
    DEFAULT         reduce using rule 148 (release_labels -> .)
    {               reduce using rule 148 (release_labels -> .)
    ;               reduce using rule 148 (release_labels -> .)
    IF              reduce using rule 148 (release_labels -> .)
    SWITCH          reduce using rule 148 (release_labels -> .)
    WHILE           reduce using rule 148 (release_labels -> .)
    DO              reduce using rule 148 (release_labels -> .)
    FOR             reduce using rule 148 (release_labels -> .)
    CONTINUE        reduce using rule 148 (release_labels -> .)
    BREAK           reduce using rule 148 (release_labels -> .)
    RETURN          reduce using rule 148 (release_labels -> .)
    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    INC_OP          reduce using rule 148 (release_labels -> .)
    DEC_OP          reduce using rule 148 (release_labels -> .)
    SIZEOF          reduce using rule 148 (release_labels -> .)
    &               reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    +               reduce using rule 148 (release_labels -> .)
    -               reduce using rule 148 (release_labels -> .)
    !               reduce using rule 148 (release_labels -> .)
    (               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    INTEGER         reduce using rule 148 (release_labels -> .)
    DECIMALFLOAT    reduce using rule 148 (release_labels -> .)
    FLOATVAL        reduce using rule 148 (release_labels -> .)
    CHARACTER       reduce using rule 148 (release_labels -> .)
    ESCAPECHAR      reduce using rule 148 (release_labels -> .)
    STRING          reduce using rule 148 (release_labels -> .)
    }               reduce using rule 148 (release_labels -> .)
    ELSE            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 289

state 284

    (153) selection_statement -> SWITCH get_labels ( expression ) switch_label . statement release_switch_label release_labels
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 290
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 285

    (155) iteration_statement -> DO get_labels statement WHILE ( expression . ) ; release_labels
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 291
    ,               shift and go to state 159


state 286

    (152) selection_statement -> IF ( expression ) statement ELSE . statement
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 292
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 287

    (156) iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) . statement release_labels
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    selection_statement            shift and go to state 231
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 293
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 288

    (157) iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement . ) statement release_labels

    )               shift and go to state 294


state 289

    (154) iteration_statement -> WHILE get_labels ( expression ) statement release_labels .

    CASE            reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    DEFAULT         reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    {               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    ;               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    IF              reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    SWITCH          reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    WHILE           reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    DO              reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    FOR             reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    CONTINUE        reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    BREAK           reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    RETURN          reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    VOID            reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    CHAR            reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    INT             reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    FLOAT           reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    TYPE_NAME       reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    INC_OP          reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    DEC_OP          reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    SIZEOF          reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    &               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    *               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    +               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    -               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    !               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    (               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    IDENTIFIER      reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    INTEGER         reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    DECIMALFLOAT    reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    FLOATVAL        reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    CHARACTER       reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    ESCAPECHAR      reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    STRING          reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    }               reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)
    ELSE            reduce using rule 154 (iteration_statement -> WHILE get_labels ( expression ) statement release_labels .)


state 290

    (153) selection_statement -> SWITCH get_labels ( expression ) switch_label statement . release_switch_label release_labels
    (150) release_switch_label -> .

    CASE            reduce using rule 150 (release_switch_label -> .)
    DEFAULT         reduce using rule 150 (release_switch_label -> .)
    {               reduce using rule 150 (release_switch_label -> .)
    ;               reduce using rule 150 (release_switch_label -> .)
    IF              reduce using rule 150 (release_switch_label -> .)
    SWITCH          reduce using rule 150 (release_switch_label -> .)
    WHILE           reduce using rule 150 (release_switch_label -> .)
    DO              reduce using rule 150 (release_switch_label -> .)
    FOR             reduce using rule 150 (release_switch_label -> .)
    CONTINUE        reduce using rule 150 (release_switch_label -> .)
    BREAK           reduce using rule 150 (release_switch_label -> .)
    RETURN          reduce using rule 150 (release_switch_label -> .)
    VOID            reduce using rule 150 (release_switch_label -> .)
    CHAR            reduce using rule 150 (release_switch_label -> .)
    INT             reduce using rule 150 (release_switch_label -> .)
    FLOAT           reduce using rule 150 (release_switch_label -> .)
    TYPE_NAME       reduce using rule 150 (release_switch_label -> .)
    INC_OP          reduce using rule 150 (release_switch_label -> .)
    DEC_OP          reduce using rule 150 (release_switch_label -> .)
    SIZEOF          reduce using rule 150 (release_switch_label -> .)
    &               reduce using rule 150 (release_switch_label -> .)
    *               reduce using rule 150 (release_switch_label -> .)
    +               reduce using rule 150 (release_switch_label -> .)
    -               reduce using rule 150 (release_switch_label -> .)
    !               reduce using rule 150 (release_switch_label -> .)
    (               reduce using rule 150 (release_switch_label -> .)
    IDENTIFIER      reduce using rule 150 (release_switch_label -> .)
    INTEGER         reduce using rule 150 (release_switch_label -> .)
    DECIMALFLOAT    reduce using rule 150 (release_switch_label -> .)
    FLOATVAL        reduce using rule 150 (release_switch_label -> .)
    CHARACTER       reduce using rule 150 (release_switch_label -> .)
    ESCAPECHAR      reduce using rule 150 (release_switch_label -> .)
    STRING          reduce using rule 150 (release_switch_label -> .)
    }               reduce using rule 150 (release_switch_label -> .)
    ELSE            reduce using rule 150 (release_switch_label -> .)

    release_switch_label           shift and go to state 295

state 291

    (155) iteration_statement -> DO get_labels statement WHILE ( expression ) . ; release_labels

    ;               shift and go to state 296


state 292

    (152) selection_statement -> IF ( expression ) statement ELSE statement .

    CASE            reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEFAULT         reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SWITCH          reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    TYPE_NAME       reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INTEGER         reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DECIMALFLOAT    reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOATVAL        reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHARACTER       reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ESCAPECHAR      reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING          reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 152 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 293

    (156) iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement . release_labels
    (148) release_labels -> .

    CASE            reduce using rule 148 (release_labels -> .)
    DEFAULT         reduce using rule 148 (release_labels -> .)
    {               reduce using rule 148 (release_labels -> .)
    ;               reduce using rule 148 (release_labels -> .)
    IF              reduce using rule 148 (release_labels -> .)
    SWITCH          reduce using rule 148 (release_labels -> .)
    WHILE           reduce using rule 148 (release_labels -> .)
    DO              reduce using rule 148 (release_labels -> .)
    FOR             reduce using rule 148 (release_labels -> .)
    CONTINUE        reduce using rule 148 (release_labels -> .)
    BREAK           reduce using rule 148 (release_labels -> .)
    RETURN          reduce using rule 148 (release_labels -> .)
    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    INC_OP          reduce using rule 148 (release_labels -> .)
    DEC_OP          reduce using rule 148 (release_labels -> .)
    SIZEOF          reduce using rule 148 (release_labels -> .)
    &               reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    +               reduce using rule 148 (release_labels -> .)
    -               reduce using rule 148 (release_labels -> .)
    !               reduce using rule 148 (release_labels -> .)
    (               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    INTEGER         reduce using rule 148 (release_labels -> .)
    DECIMALFLOAT    reduce using rule 148 (release_labels -> .)
    FLOATVAL        reduce using rule 148 (release_labels -> .)
    CHARACTER       reduce using rule 148 (release_labels -> .)
    ESCAPECHAR      reduce using rule 148 (release_labels -> .)
    STRING          reduce using rule 148 (release_labels -> .)
    }               reduce using rule 148 (release_labels -> .)
    ELSE            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 297

state 294

    (157) iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) . statement release_labels
    (125) statement -> . labeled_statement
    (126) statement -> . compound_statement
    (127) statement -> . expression_statement
    (128) statement -> . selection_statement
    (129) statement -> . iteration_statement
    (130) statement -> . jump_statement
    (131) labeled_statement -> . CASE constant_expression : statement
    (132) labeled_statement -> . DEFAULT : statement
    (133) compound_statement -> . { }
    (134) compound_statement -> . { new_scope compound_statement_list finish_scope }
    (135) compound_statement -> . { new_scope compound_declaration_list finish_scope }
    (144) expression_statement -> . ;
    (145) expression_statement -> . expression ;
    (146) expression_statement -> . expression error
    (151) selection_statement -> . IF ( expression ) statement
    (152) selection_statement -> . IF ( expression ) statement ELSE statement
    (153) selection_statement -> . SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels
    (154) iteration_statement -> . WHILE get_labels ( expression ) statement release_labels
    (155) iteration_statement -> . DO get_labels statement WHILE ( expression ) ; release_labels
    (156) iteration_statement -> . FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels
    (157) iteration_statement -> . FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels
    (160) jump_statement -> . CONTINUE ;
    (161) jump_statement -> . BREAK ;
    (162) jump_statement -> . RETURN ;
    (163) jump_statement -> . RETURN expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (65) assignment_expression -> . conditional_expression
    (66) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) conditional_expression -> . logical_or_expression
    (23) unary_expression -> . postfix_expression
    (24) unary_expression -> . INC_OP unary_expression
    (25) unary_expression -> . DEC_OP unary_expression
    (26) unary_expression -> . unary_operator cast_expression
    (27) unary_expression -> . SIZEOF unary_expression
    (28) unary_expression -> . SIZEOF ( type_name )
    (62) logical_or_expression -> . logical_and_expression
    (63) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (13) postfix_expression -> . primary_expression
    (14) postfix_expression -> . postfix_expression [ expression ]
    (15) postfix_expression -> . postfix_expression ( )
    (16) postfix_expression -> . postfix_expression ( argument_expression_list )
    (17) postfix_expression -> . postfix_expression . identifier
    (18) postfix_expression -> . postfix_expression PTR_OP identifier
    (19) postfix_expression -> . postfix_expression INC_OP
    (20) postfix_expression -> . postfix_expression DEC_OP
    (29) unary_operator -> . &
    (30) unary_operator -> . *
    (31) unary_operator -> . +
    (32) unary_operator -> . -
    (33) unary_operator -> . !
    (60) logical_and_expression -> . inclusive_or_expression
    (61) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . identifier
    (11) primary_expression -> . constant
    (12) primary_expression -> . ( expression )
    (58) inclusive_or_expression -> . exclusive_or_expression
    (59) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (3) identifier -> . IDENTIFIER
    (4) constant -> . INTEGER
    (5) constant -> . DECIMALFLOAT
    (6) constant -> . FLOATVAL
    (7) constant -> . CHARACTER
    (8) constant -> . ESCAPECHAR
    (9) constant -> . STRING
    (56) exclusive_or_expression -> . and_expression
    (57) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (54) and_expression -> . equality_expression
    (55) and_expression -> . and_expression & equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ_OP relational_expression
    (53) equality_expression -> . equality_expression NE_OP relational_expression
    (46) relational_expression -> . shift_expression
    (47) relational_expression -> . relational_expression < shift_expression
    (48) relational_expression -> . relational_expression > shift_expression
    (49) relational_expression -> . relational_expression LE_OP shift_expression
    (50) relational_expression -> . relational_expression GE_OP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LEFT_OP additive_expression
    (45) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (40) additive_expression -> . multiplicative_expression
    (41) additive_expression -> . additive_expression + multiplicative_expression
    (42) additive_expression -> . additive_expression - multiplicative_expression
    (36) multiplicative_expression -> . cast_expression
    (37) multiplicative_expression -> . multiplicative_expression * cast_expression
    (38) multiplicative_expression -> . multiplicative_expression / cast_expression
    (39) multiplicative_expression -> . multiplicative_expression % cast_expression
    (34) cast_expression -> . unary_expression
    (35) cast_expression -> . ( type_name ) cast_expression

    CASE            shift and go to state 224
    DEFAULT         shift and go to state 222
    {               shift and go to state 133
    ;               shift and go to state 217
    IF              shift and go to state 232
    SWITCH          shift and go to state 225
    WHILE           shift and go to state 223
    DO              shift and go to state 230
    FOR             shift and go to state 218
    CONTINUE        shift and go to state 219
    BREAK           shift and go to state 228
    RETURN          shift and go to state 214
    INC_OP          shift and go to state 69
    DEC_OP          shift and go to state 37
    SIZEOF          shift and go to state 41
    &               shift and go to state 44
    *               shift and go to state 48
    +               shift and go to state 47
    -               shift and go to state 49
    !               shift and go to state 43
    (               shift and go to state 96
    IDENTIFIER      shift and go to state 10
    INTEGER         shift and go to state 57
    DECIMALFLOAT    shift and go to state 54
    FLOATVAL        shift and go to state 62
    CHARACTER       shift and go to state 39
    ESCAPECHAR      shift and go to state 40
    STRING          shift and go to state 53

    expression_statement           shift and go to state 210
    selection_statement            shift and go to state 231
    constant                       shift and go to state 35
    unary_expression               shift and go to state 94
    exclusive_or_expression        shift and go to state 38
    iteration_statement            shift and go to state 211
    compound_statement             shift and go to state 216
    inclusive_or_expression        shift and go to state 45
    postfix_expression             shift and go to state 63
    and_expression                 shift and go to state 42
    statement                      shift and go to state 298
    unary_operator                 shift and go to state 66
    cast_expression                shift and go to state 51
    logical_or_expression          shift and go to state 65
    relational_expression          shift and go to state 50
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 64
    additive_expression            shift and go to state 55
    primary_expression             shift and go to state 56
    logical_and_expression         shift and go to state 58
    shift_expression               shift and go to state 60
    equality_expression            shift and go to state 61
    jump_statement                 shift and go to state 227
    labeled_statement              shift and go to state 212
    conditional_expression         shift and go to state 101
    identifier                     shift and go to state 68
    expression                     shift and go to state 221

state 295

    (153) selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label . release_labels
    (148) release_labels -> .

    CASE            reduce using rule 148 (release_labels -> .)
    DEFAULT         reduce using rule 148 (release_labels -> .)
    {               reduce using rule 148 (release_labels -> .)
    ;               reduce using rule 148 (release_labels -> .)
    IF              reduce using rule 148 (release_labels -> .)
    SWITCH          reduce using rule 148 (release_labels -> .)
    WHILE           reduce using rule 148 (release_labels -> .)
    DO              reduce using rule 148 (release_labels -> .)
    FOR             reduce using rule 148 (release_labels -> .)
    CONTINUE        reduce using rule 148 (release_labels -> .)
    BREAK           reduce using rule 148 (release_labels -> .)
    RETURN          reduce using rule 148 (release_labels -> .)
    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    INC_OP          reduce using rule 148 (release_labels -> .)
    DEC_OP          reduce using rule 148 (release_labels -> .)
    SIZEOF          reduce using rule 148 (release_labels -> .)
    &               reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    +               reduce using rule 148 (release_labels -> .)
    -               reduce using rule 148 (release_labels -> .)
    !               reduce using rule 148 (release_labels -> .)
    (               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    INTEGER         reduce using rule 148 (release_labels -> .)
    DECIMALFLOAT    reduce using rule 148 (release_labels -> .)
    FLOATVAL        reduce using rule 148 (release_labels -> .)
    CHARACTER       reduce using rule 148 (release_labels -> .)
    ESCAPECHAR      reduce using rule 148 (release_labels -> .)
    STRING          reduce using rule 148 (release_labels -> .)
    }               reduce using rule 148 (release_labels -> .)
    ELSE            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 299

state 296

    (155) iteration_statement -> DO get_labels statement WHILE ( expression ) ; . release_labels
    (148) release_labels -> .

    CASE            reduce using rule 148 (release_labels -> .)
    DEFAULT         reduce using rule 148 (release_labels -> .)
    {               reduce using rule 148 (release_labels -> .)
    ;               reduce using rule 148 (release_labels -> .)
    IF              reduce using rule 148 (release_labels -> .)
    SWITCH          reduce using rule 148 (release_labels -> .)
    WHILE           reduce using rule 148 (release_labels -> .)
    DO              reduce using rule 148 (release_labels -> .)
    FOR             reduce using rule 148 (release_labels -> .)
    CONTINUE        reduce using rule 148 (release_labels -> .)
    BREAK           reduce using rule 148 (release_labels -> .)
    RETURN          reduce using rule 148 (release_labels -> .)
    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    INC_OP          reduce using rule 148 (release_labels -> .)
    DEC_OP          reduce using rule 148 (release_labels -> .)
    SIZEOF          reduce using rule 148 (release_labels -> .)
    &               reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    +               reduce using rule 148 (release_labels -> .)
    -               reduce using rule 148 (release_labels -> .)
    !               reduce using rule 148 (release_labels -> .)
    (               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    INTEGER         reduce using rule 148 (release_labels -> .)
    DECIMALFLOAT    reduce using rule 148 (release_labels -> .)
    FLOATVAL        reduce using rule 148 (release_labels -> .)
    CHARACTER       reduce using rule 148 (release_labels -> .)
    ESCAPECHAR      reduce using rule 148 (release_labels -> .)
    STRING          reduce using rule 148 (release_labels -> .)
    }               reduce using rule 148 (release_labels -> .)
    ELSE            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 300

state 297

    (156) iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .

    CASE            reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    DEFAULT         reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    {               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    ;               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    IF              reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    SWITCH          reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    WHILE           reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    DO              reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    FOR             reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    CONTINUE        reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    BREAK           reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    RETURN          reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    VOID            reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    CHAR            reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    INT             reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    FLOAT           reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    TYPE_NAME       reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    INC_OP          reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    DEC_OP          reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    SIZEOF          reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    &               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    *               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    +               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    -               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    !               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    (               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    IDENTIFIER      reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    INTEGER         reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    DECIMALFLOAT    reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    FLOATVAL        reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    CHARACTER       reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    ESCAPECHAR      reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    STRING          reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    }               reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)
    ELSE            reduce using rule 156 (iteration_statement -> FOR get_labels ( expression_statement expression_statement _embed0_iteration_statement ) statement release_labels .)


state 298

    (157) iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement . release_labels
    (148) release_labels -> .

    CASE            reduce using rule 148 (release_labels -> .)
    DEFAULT         reduce using rule 148 (release_labels -> .)
    {               reduce using rule 148 (release_labels -> .)
    ;               reduce using rule 148 (release_labels -> .)
    IF              reduce using rule 148 (release_labels -> .)
    SWITCH          reduce using rule 148 (release_labels -> .)
    WHILE           reduce using rule 148 (release_labels -> .)
    DO              reduce using rule 148 (release_labels -> .)
    FOR             reduce using rule 148 (release_labels -> .)
    CONTINUE        reduce using rule 148 (release_labels -> .)
    BREAK           reduce using rule 148 (release_labels -> .)
    RETURN          reduce using rule 148 (release_labels -> .)
    VOID            reduce using rule 148 (release_labels -> .)
    CHAR            reduce using rule 148 (release_labels -> .)
    INT             reduce using rule 148 (release_labels -> .)
    FLOAT           reduce using rule 148 (release_labels -> .)
    TYPE_NAME       reduce using rule 148 (release_labels -> .)
    INC_OP          reduce using rule 148 (release_labels -> .)
    DEC_OP          reduce using rule 148 (release_labels -> .)
    SIZEOF          reduce using rule 148 (release_labels -> .)
    &               reduce using rule 148 (release_labels -> .)
    *               reduce using rule 148 (release_labels -> .)
    +               reduce using rule 148 (release_labels -> .)
    -               reduce using rule 148 (release_labels -> .)
    !               reduce using rule 148 (release_labels -> .)
    (               reduce using rule 148 (release_labels -> .)
    IDENTIFIER      reduce using rule 148 (release_labels -> .)
    INTEGER         reduce using rule 148 (release_labels -> .)
    DECIMALFLOAT    reduce using rule 148 (release_labels -> .)
    FLOATVAL        reduce using rule 148 (release_labels -> .)
    CHARACTER       reduce using rule 148 (release_labels -> .)
    ESCAPECHAR      reduce using rule 148 (release_labels -> .)
    STRING          reduce using rule 148 (release_labels -> .)
    }               reduce using rule 148 (release_labels -> .)
    ELSE            reduce using rule 148 (release_labels -> .)

    release_labels                 shift and go to state 301

state 299

    (153) selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .

    CASE            reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    DEFAULT         reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    {               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    ;               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    IF              reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    SWITCH          reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    WHILE           reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    DO              reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    FOR             reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    CONTINUE        reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    BREAK           reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    RETURN          reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    VOID            reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    CHAR            reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    INT             reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    FLOAT           reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    TYPE_NAME       reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    INC_OP          reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    DEC_OP          reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    SIZEOF          reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    &               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    *               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    +               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    -               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    !               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    (               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    IDENTIFIER      reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    INTEGER         reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    DECIMALFLOAT    reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    FLOATVAL        reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    CHARACTER       reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    ESCAPECHAR      reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    STRING          reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    }               reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)
    ELSE            reduce using rule 153 (selection_statement -> SWITCH get_labels ( expression ) switch_label statement release_switch_label release_labels .)


state 300

    (155) iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .

    CASE            reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    DEFAULT         reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    {               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    ;               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    IF              reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    SWITCH          reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    WHILE           reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    DO              reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    FOR             reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    CONTINUE        reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    BREAK           reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    RETURN          reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    VOID            reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    CHAR            reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    INT             reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    FLOAT           reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    TYPE_NAME       reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    INC_OP          reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    DEC_OP          reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    SIZEOF          reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    &               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    *               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    +               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    -               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    !               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    (               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    IDENTIFIER      reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    INTEGER         reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    DECIMALFLOAT    reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    FLOATVAL        reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    CHARACTER       reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    ESCAPECHAR      reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    STRING          reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    }               reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)
    ELSE            reduce using rule 155 (iteration_statement -> DO get_labels statement WHILE ( expression ) ; release_labels .)


state 301

    (157) iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .

    CASE            reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    DEFAULT         reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    {               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    ;               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    IF              reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    SWITCH          reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    WHILE           reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    DO              reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    FOR             reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    CONTINUE        reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    BREAK           reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    RETURN          reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    VOID            reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    CHAR            reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    INT             reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    FLOAT           reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    TYPE_NAME       reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    INC_OP          reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    DEC_OP          reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    SIZEOF          reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    &               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    *               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    +               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    -               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    !               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    (               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    IDENTIFIER      reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    INTEGER         reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    DECIMALFLOAT    reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    FLOATVAL        reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    CHARACTER       reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    ESCAPECHAR      reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    STRING          reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    }               reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)
    ELSE            reduce using rule 157 (iteration_statement -> FOR get_labels ( expression_statement expression_statement expression _embed1_iteration_statement ) statement release_labels .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VOID in state 9 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 9 resolved as shift
WARNING: shift/reduce conflict for INT in state 9 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 9 resolved as shift
WARNING: shift/reduce conflict for TYPE_NAME in state 9 resolved as shift
WARNING: shift/reduce conflict for * in state 9 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 9 resolved as shift
WARNING: shift/reduce conflict for VOID in state 28 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 28 resolved as shift
WARNING: shift/reduce conflict for INT in state 28 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 28 resolved as shift
WARNING: shift/reduce conflict for TYPE_NAME in state 28 resolved as shift
WARNING: shift/reduce conflict for * in state 28 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 28 resolved as shift
